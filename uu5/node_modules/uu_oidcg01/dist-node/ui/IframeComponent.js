"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CallbackHandler = require("./CallbackHandler.js");

var _CallbackHandler2 = _interopRequireDefault(_CallbackHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Visual component for attempting user login/logout on a background in an iframe. Usable only for prompt="none" cases.
 * After login/logout initAttrs.onResult(authResultUrl) is called as callback.
 * 
 * @param initAttrs.url The URL to be called on OpenID Connect Server for user authentication.
 * @param initAttrs.onResult The callback to call after login/logout finishes.
 */
var IframeComponent = function IframeComponent(initAttrs) {
  var attrs = Object.assign({}, initAttrs);
  var state = {
    iframe: null
  };
  Object.defineProperty(state, "loginWindow", {
    get: function get() {
      try {
        // needs try-catch depending on which phase we're being asked (might be during redirect, ..., which can be cross-domain)
        return state.iframe != null ? state.iframe.contentWindow : null;
      } catch (e) {
        // ignore
      }
      return null;
    }
  });

  // add self to the list of openend loginWindows
  _CallbackHandler2.default.registerForCallback(this, state);

  // finalization callback (for this component instance) called after login from redirect_uri page
  this.finalize = function (aLoginResult) {
    // cleanup & do the callback
    this.destroy();
    if (attrs.onResult) attrs.onResult(aLoginResult);
  }.bind(this);

  // TODO Maybe use timeout ~30s and destroy in case that something is seriously wrong (network errors, ...).

  this.render = function () {
    if (!state.iframe) {
      state.iframe = document.createElement("iframe");
      state.iframe.style.cssText = "position: absolute;top: -300px; left: -300px; width: 200px; height: 200px; opacity: 0;";
      state.iframe.src = attrs.url;
      document.body.appendChild(state.iframe);
    }
  };

  this.destroy = function () {
    if (state.iframe && state.iframe.parentNode) state.iframe.parentNode.removeChild(state.iframe);
    this.destroy = function () {};
    _CallbackHandler2.default.unregisterForCallback(this);
  };
};

exports.default = IframeComponent;