"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Discovery = require("../discovery/Discovery.js");

var _Discovery2 = _interopRequireDefault(_Discovery);

var _PromiseUtil = require("../util/PromiseUtil.js");

var _PromiseUtil2 = _interopRequireDefault(_PromiseUtil);

var _PopupComponent = require("../ui/PopupComponent.js");

var _PopupComponent2 = _interopRequireDefault(_PopupComponent);

var _IframeComponent = require("../ui/IframeComponent.js");

var _IframeComponent2 = _interopRequireDefault(_IframeComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ImplicitFlow = {
  /**
   * @param options.serverUri
   * @param options.clientId
   * @param options.redirectUri
   * @param options.loginVisualComponent
   * @param options.loginParams
   */
  login: function login(options) {
    var opts = options || {};

    // check that required data is available
    var serverUri = opts.serverUri;
    if (!serverUri) throw new Error("ImplicitFlow.login requires option 'serverUri'.");
    var clientId = opts.clientId;
    if (!clientId) throw new Error("ImplicitFlow.login requires option 'clientId'.");
    var redirectUri = opts.redirectUri;
    if (!redirectUri) throw new Error("ImplicitFlow.login requires option 'redirectUri'.");

    // NOTE Using PromiseUtil.immediateThen which will run our "then" callback immediately if
    // the Discovery.getMetadata is already resolved. The idea is that this login could have
    // been triggered from "click" event and we need to open popup window within this event's
    // lifetime or within single Promise (but not Promise chain because that doesn't work on
    // iPhones).
    return _PromiseUtil2.default.immediateThen(_Discovery2.default.getMetadata(serverUri), function (oidcMetadata) {
      // prepare login URL
      var loginParams = Object.assign({ scope: "openid" }, opts.loginParams, {
        response_type: "id_token token",
        client_id: clientId,
        redirect_uri: redirectUri
      });
      var loginParamsParts = [];
      for (var k in loginParams) {
        var v = loginParams[k];
        if (v == null) continue;
        loginParamsParts.push(encodeURIComponent(k) + "=" + encodeURIComponent(v + ""));
      }
      var loginUrl = oidcMetadata.authorization_endpoint + "?" + loginParamsParts.join("&");

      // display visual component for logging in (popup window)
      var LoginVisualComponent = opts.loginVisualComponent || (loginParams.prompt != "none" ? _PopupComponent2.default : _IframeComponent2.default);
      return new Promise(function (resolve, reject) {
        new LoginVisualComponent({
          url: loginUrl,
          onResult: function onResult(aLoginResult) {
            var authResponse = ImplicitFlow.getAuthResponseFromCallback(aLoginResult);
            if (authResponse === false) return reject(new Error("User refused to sign in or the operation didn't complete successfully, e.g. due to popup blocking."));

            // resolve the promise successfully with the token (iff there's no "error" field)
            if (authResponse.error) reject(authResponse);else resolve(authResponse);
          }
        }).render();
      });
    }, function (e) {
      return Promise.reject(e);
    });
  },

  /**
   * 
   * @param {*} aLoginCallbackResult 
   * @return One of: 
   * * false - user refused to log in (or popups are blocked)
   * * object with "error" field set - an error
   * * object - the OpenID Authentication Response with fields such as id_token, token_type, issued_at, ...
   */
  getAuthResponseFromCallback: function getAuthResponseFromCallback(aLoginCallbackResult) {
    if (aLoginCallbackResult === false) return aLoginCallbackResult;

    // extract login token
    // example of successful aLoginCallbackResult: "...#access_token=UUOIDCAT-27a13a6e626a40c49e036cbab55f3e27&id_token=eyJ0eXAiOi...&token_type=Bearer&expires_in=7200&scope=openid" 
    // example of error aLoginCallbackResult:      "...#error=server_error&error_description=Interaction+required+to+authenticate+user%2C+but+parameter+%27prompt%3Dnone%27+specified+by+client%2C+so+interaction+is+not+possible.&uu_oidc_error_id=047a06f806d1b13-6f55e2af8c2ff99d&uu_oidc_error_code=UU.OIDC-SERVER%2FE000_UNEXPECTED_ERROR"
    var authResponse = {};
    aLoginCallbackResult.replace(/^[^#]*#?/, "").split(/&/).forEach(function (it) {
      var eqlIdx = it.indexOf("=");
      var key = decodeURIComponent((eqlIdx == -1 ? it.substr(0) : it.substr(0, eqlIdx)).replace(/\+/g, " "));
      var value = decodeURIComponent((eqlIdx == -1 ? "" : it.substr(eqlIdx + 1)).replace(/\+/g, " "));
      authResponse[key] = value;
    });
    return authResponse;
  }
};

exports.default = ImplicitFlow;