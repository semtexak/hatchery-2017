{
  "_args": [
    [
      {
        "raw": "uu_oidcg01@https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
        "scope": null,
        "escapedName": "uu_oidcg01",
        "name": "uu_oidcg01",
        "rawSpec": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
        "spec": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
        "type": "remote"
      },
      "F:\\JAVA\\hatchery-2017\\uu5"
    ]
  ],
  "_from": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
  "_id": "uu_oidcg01@2.0.2",
  "_inCache": true,
  "_location": "/uu_oidcg01",
  "_phantomChildren": {},
  "_requested": {
    "raw": "uu_oidcg01@https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
    "scope": null,
    "escapedName": "uu_oidcg01",
    "name": "uu_oidcg01",
    "rawSpec": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
    "spec": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/uu_appg01"
  ],
  "_resolved": "https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
  "_shasum": "611cfaff9dcd56eb6fcebf1a951b8709cb57e062",
  "_shrinkwrap": null,
  "_spec": "uu_oidcg01@https://cdn.plus4u.net/uu-oidcg01/2.0.0/uu_oidcg01.tgz",
  "_where": "F:\\JAVA\\hatchery-2017\\uu5",
  "author": {
    "name": "Unicorn Universe"
  },
  "babel": {
    "presets": [
      "es2015"
    ]
  },
  "dependencies": {
    "uu_appg01_core": "^2.0.0"
  },
  "description": "uu_oidcg01 library includes:",
  "devDependencies": {
    "babel-cli": "6.18.0",
    "babel-core": "6.13.2",
    "babel-loader": "6.2.5",
    "babel-preset-es2015": "6.13.2",
    "chai": "3.5.0",
    "copy-webpack-plugin": "4.0.0",
    "dateformat": "2.0.0",
    "ejs-loader": "0.3.0",
    "extract-text-webpack-plugin": "1.0.1",
    "fs-extra": "1.0.0",
    "html-webpack-plugin": "2.28.0",
    "ink-docstrap": "1.3.0",
    "jsdoc": "3.4.2",
    "memory-fs": "0.3.0",
    "mocha": "3.1.2",
    "rimraf": "2.5.4",
    "walk": "2.3.9",
    "webpack": "1.13.3",
    "wrapper-webpack-plugin": "0.1.11"
  },
  "engines": {
    "node": ">=4.5.0"
  },
  "files": [
    "dist*",
    "doc",
    "README.md"
  ],
  "homepage": "https://cdn.plus4u.net/uu-oidcg01/2.0.2/doc/index.html",
  "license": "MIT",
  "main": "dist-node/index.js",
  "name": "uu_oidcg01",
  "optionalDependencies": {},
  "readme": "uu_oidcg01 library includes:\n\n* [Session](UuOidc.Session.html) - for session management, i.e. login, logout, accessing identity of currently logged in user, ...\n* [SessionHandler](UuOidc.SessionHandler.html) - interceptor for UuApp.AppClient.Client which handles authentication via OpenID Connect.\n\nSee [Session](UuOidc.Session.html) for pre-requisities that must be fulfilled in order to successfully initialize and use session.\n\nExample of usage in HTML page:\n\n```xml\n<script src=\"https://cdn.plus4u.net/uu_appg01_core/2.0.0/uu_appg01_core.min.js\"></script>\n<script src=\"https://cdn.plus4u.net/uu_oidcg01/2.0.0/uu_oidcg01.min.js\"></script>\n<script>\nUuApp.Util.Config.init(\"./environment.json\");\n// {\n//   \"gatewayUri\": \"https://uuappsg01.plus4u.net\",\n//   \"uuoidc.serverUri\": \"https://oidc.plus4u.net/uu-oidcg01-main/0-0\",\n//   \"uuoidc.clientId\": \"YY7ffYSVLu...\",\n//   \"uuoidc.sessionCheckInterval\": 60,\n//   \"uuoidc.redirectUri\": \"callbacks/oidc-callback.html\" // must be on same domain as current page; relative to document.baseURI (current URL)\n// }\n\n\n// waiting for initialization of session during page load (finding out logged in user is asynchronous operation)\nUuOidc.Session.initPromise.then(function (session) {\n  console.log(session.getIdentity());\n});\n\n// access to current identity, state\nvar session = UuOidc.Session.currentSession;\nsession.isAuthenticated();  // true / false\nsession.getIdentity(); // null or object literal { \"name\": \"John Frog\", universeId, email, levelOfAssurance, loginLevelOfAssurance }\nsession.getClaims();   // additional OpenID claims\n\n// detection of identity login / logout / auto-login / re-login\nfunction onIdentityChange(identity) {\n  if (identity == null) return; // anonymous user\n  console.log(identity.name);\n  // this === session\n}\nsession.addIdentityChangeListener(onIdentityChange);\nsession.removeIdentityChangeListener(onIdentityChange);\n\n// explicit login / logout\nsession.login().then(function (session) { // login as non-anonymous user; also triggers identityChange event (after success)\n  console.log(\"Logged in as \", session.getIdentity().name, \"Full identity:\", session.getIdentity());\n});\nsession.logout().then(function () { // also triggers identityChange event (after success)\n  console.log(\"Logged out.\");\n});\n\n// explicit login with access token\nsession.login({\n  accessToken: \"...id_token...\"\n});\n\n// explicit login with access token issued by uuOS8\nsession.login({\n  accessToken: \"...token from uuOS8...\",\n  tokenTypeHint: \"urn:ietf:params:oauth:token-type:jwt-uuos8\"\n});\n</script>\n```",
  "readmeFilename": "README.md",
  "scripts": {
    "clean": "rimraf dist dist-node dist-browser doc",
    "dist": "npm run clean && npm run dist-node && npm run dist-browser",
    "dist-browser": "node tools/build-lib-prod.js",
    "dist-node": "babel --copy-files --out-dir dist-node --ignore .test.js,-test.js,-browser,.browser,test src",
    "doc": "jsdoc -t node_modules/ink-docstrap/template -c tools/jsdoc.config.json -d doc/ -r --readme README.md src/",
    "test": "npm run test-node && npm run test-browser",
    "test-browser": ":",
    "test-node": "node tools/run-tests.node.js"
  },
  "version": "2.0.2"
}
