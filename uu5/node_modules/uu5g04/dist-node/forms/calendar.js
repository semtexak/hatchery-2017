import React from 'react';
import {BaseMixin, ElementaryMixin, SwipeMixin, LsiMixin} from './../common/common.js';
import Environment from './../environment/environment.js';
import {Glyphicon} from './../bricks/bricks.js';

import './calendar.less';

export const Calendar = React.createClass({

  mixins: [
    BaseMixin,
    ElementaryMixin,
    SwipeMixin,
    LsiMixin
  ],

  statics: {
    tagName: 'UU5.Forms.Calendar',
    classNames: {
      main: 'uu5-forms-calendar',
      table: 'uu5-forms-calendar-table table-condensed',
      monthTable: 'uu5-forms-calendar-month-table',
      yearTable: 'uu5-forms-calendar-year-table',
      decadeTable: 'uu5-forms-calendar-decade-table',
      thead: 'uu5-forms-calendar-thead',
      headRow: 'uu5-forms-calendar-head-row',
      headCellPrev: 'uu5-forms-calendar-head-cell-prev',
      headCellHeader: 'uu5-forms-calendar-head-cell-header',
      headCellNext: 'uu5-forms-calendar-head-cell-next',
      glyphicon: 'uu5-forms-calendar-glyphicon',
      dayNames: 'uu5-forms-calendar-day-names',
      dayName: 'uu5-forms-calendar-day-name',
      week: 'uu5-forms-calendar-week',
      day: 'uu5-forms-calendar-day',
      active: 'uu5-forms-calendar-active',
      activeSection: 'uu5-forms-calendar-active-section',
      anotherSection: 'uu5-forms-calendar-another-section',
      today: 'uu5-forms-calendar-today',
      month: 'uu5-forms-calendar-month',
      months: 'uu5-forms-calendar-months',
      year: 'uu5-forms-calendar-year',
      years: 'uu5-forms-calendar-years',
      cell: 'uu5-forms-calendar-cell',
      xsCell: 'uu5-forms-calendar-xs-cell col-xs-3',
      specCell: 'uu5-forms-calendar-spec-cell',
      disabled: 'uu5-common-disabled'
    },
    defaults: {
      prevIcon: 'uu-glyphicon-arrow-left',
      nextIcon: 'uu-glyphicon-arrow-right'
    },
    errors: {
      invalidDate: 'Cannot set invalid date %s.'
    },
    lsi: () => (Environment.Lsi.Forms.calendar)
  },

  propTypes: {
    date: React.PropTypes.oneOfType([
      React.PropTypes.object,
      React.PropTypes.string
    ]),
    dateFrom: React.PropTypes.oneOfType([
      React.PropTypes.object,
      React.PropTypes.string
    ]),
    dateTo: React.PropTypes.oneOfType([
      React.PropTypes.object,
      React.PropTypes.string
    ]),
    onChange: React.PropTypes.func
  },

  // Setting defaults
  getDefaultProps: function () {
    return {
      date: null,
      dateFrom: null,
      dateTo: null,
      onChange: null
    };
  },

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    var state = this._parseDate(this.props.date);
    state.dateFrom = this.props.dateFrom ? this._parseDate(this.props.dateFrom).date : null;
    state.dateTo = this.props.dateTo ? this._parseDate(this.props.dateTo).date : null;
    return state;
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.date !== this.props.date) {
      this.setState(this._parseDate(nextProps.date));
    }
  },

  //TODO: not work!!!!
  // shouldComponentUpdate(nextProps, nextState) {
  //   return this.shouldRender(nextProps, nextState);
  // },
  //@@viewOff:standardComponentLifeCycle

  // Interface

  setPrevious: function (setStateCallback) {
    this._changeCalendar(-1, setStateCallback);
    return this;
  },

  setNext: function (setStateCallback) {
    this._changeCalendar(1, setStateCallback);
    return this;
  },

  getDate: function () {
    return this.state.date;
  },

  setDate: function (date, setStateCallback) {
    var state = this._parseDate(date);
    if (this._isValidDate(state.date)) {
      this.setState(this._parseDate(date), setStateCallback);
    } else {
      this.showError('invalidDate', state.date);
    }
    return this;
  },

  // Overriding Functions

  // Component Specific Helpers
  _getMainAttrs: function () {
    var attrs = this.getMainAttrs();

    return attrs;
  },

  _parseDate: function (date) {
    if (typeof date === 'string') {
      date = new Date(date);
    }

    var state = {
      decade: null,
      century: null
    };

    if (date) {
      state.date = date;
      state.month = date.getMonth() + 1;
      state.year = date.getFullYear();
    } else {
      var today = new Date();
      state.date = null;
      state.month = today.getMonth() + 1;
      state.year = today.getFullYear();
    }

    return state;
  },

  _getHeaderText: function () {
    var result;
    var state = this.state;

    if (state.month) {
      result = this.getLSIValue('monthNames')[state.month - 1] + ' ' + state.year;
    } else if (state.year !== null) {
      result = state.year + '';
    } else if (state.decade !== null) {
      var century = state.century * 100;
      result = (century + (state.decade * 10)) + ' - ' + (century + ((state.decade + 1) * 10 - 1));
    }

    return result;
  },

  _headerClick: function () {
    var state = this.state;

    if (state.month) {
      state.month = null;
    } else if (state.year !== null) {
      state.decade = parseInt((state.year % 100) / 10);
      state.century = parseInt(state.year / 100);
      state.year = null;
    } else if (state.decade !== null) {
      return this;
    }

    this.setState(state);
    return this;
  },

  _isValidDate: function (date) {
    return (!this.state.dateFrom || this.state.dateFrom <= date) && (!this.state.dateTo || this.state.dateTo >= date);
  },

  _isChangeable: function (value) {
    var state = this.state;
    var newDate;

    if (state.month) {
      newDate = new Date(state.year, state.month - 1 + value);
    } else if (state.year !== null) {
      newDate = new Date(state.year + value, 0);
    } else if (state.decade !== null) {
      var newDecade = state.decade + value;
      newDate = new Date(state.century * 100 + newDecade, 0);
    }

    return newDate && this._isValidDate(newDate);
  },

  _changeCalendar: function (value, setStateCallback) {
    var state = this.state;
    var newDate;

    if (state.month) {
      newDate = new Date(state.year, state.month - 1 + value);

      if (this._isValidDate(newDate)) {
        state.month = newDate.getMonth() + 1;
        state.year = newDate.getFullYear();
      } else {
        return this;
      }

    } else if (state.year !== null) {
      newDate = new Date(state.year + value, 0);

      if (this._isValidDate(newDate)) {
        state.year = newDate.getFullYear();
      } else {
        return this;
      }

    } else if (state.decade !== null) {
      var newDecade = state.decade + value;
      var century = state.century;

      if (newDecade < 0) {
        newDecade = 9;
        century--;
        state.century = century;
      } else if (newDecade > 9) {
        newDecade = 0;
        century++;
        state.century = century;
      }

      newDate = new Date(century * 100 + newDecade * 10, 0);

      if (this._isValidDate(newDate)) {
        state.decade = newDecade;
      } else {
        return this;
      }
    }

    this.setState(state, setStateCallback);
    return this;
  },

  _prevClick: function () {
    this.setPrevious();
    return this;
  },

  _nextClick: function () {
    this.setNext();
    return this;
  },

  _getWeeks: function () {
    var result;

    if (this.state.month) {
      var calendar = this;
      var ths = this.getLSIValue('dayNames').map(function (dayName) {
        return (
          <th className={calendar.getClassName().dayName} title={dayName} key={dayName}>
            {dayName.substr(0, 2)}
          </th>
        );
      });

      result = <tr className={this.getClassName().dayNames}>{ths}</tr>;
    }

    return result;
  },

  _setDay: function (date, e) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange({value: date, event: e, component: this});
    } else {
      this.setDate(date);
    }
    return this;
  },

  _setMonth: function (month, e) {
    this.setState({month: month});
    return this;
  },

  _setYear: function (year, e) {
    this.setState({year: year, decade: null});
    return this;
  },

  _getDayRows: function () {
    var activeMonthIndex = this.state.month - 1;
    var firstDate = new Date(this.state.year, activeMonthIndex);
    var firstMondayDate = new Date(this.state.year, activeMonthIndex, 2 - (firstDate.getDay() || 7));

    var lastDate = new Date(this.state.year, activeMonthIndex + 1, 0);
    var lastSundayDate = new Date(this.state.year, this.state.month, 7 - (lastDate.getDay() || 7));

    var activeDate = firstMondayDate;
    var today = new Date();

    var trs = [];
    var tds = [];
    while (activeDate <= lastSundayDate) {
      var className = this.getClassName().cell + ' ' + this.getClassName().day;
      let enabled = (!this.state.dateFrom || this.state.dateFrom <= activeDate) && (!this.state.dateTo || this.state.dateTo >= activeDate);

      !enabled && (className += ' ' + this.getClassName().disabled);

      var onClick = enabled ? this._setDay.bind(this, activeDate) : null;

      if (this.getDate() && activeDate.getDate() === this.getDate().getDate() &&
        activeDate.getMonth() === this.getDate().getMonth() &&
        activeDate.getFullYear() === this.getDate().getFullYear()) {

        className += ' ' + this.getClassName().active;
        onClick = null;
      } else if (activeDate.getDate() === today.getDate() &&
        activeDate.getMonth() === today.getMonth() &&
        activeDate.getFullYear() === today.getFullYear()) {

        className += ' ' + this.getClassName().today;
      } else if (activeDate.getMonth() === activeMonthIndex) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(
        <td key={'day-' + activeDate.toISOString()} className={className} onClick={onClick}>
          {activeDate.getDate()}
        </td>
      );
      if (activeDate.getDay() === 0) {
        trs.push(
          <tr key={'row-' + activeDate.toISOString()} className={this.getClassName().week}>
            {tds}
          </tr>
        );
        tds = [];
      }
      activeDate = new Date(activeDate.getFullYear(), activeDate.getMonth(), activeDate.getDate() + 1);
    }

    return trs;
  },

  _getMonthRows: function () {
    var calendar = this;
    var trs = [];
    var tds = [];
    var today = new Date();

    this.getLSIValue('monthNames').forEach(function (name, i) {
      var className = calendar.getClassName().cell + ' ' + calendar.getClassName().xsCell + ' ' + calendar.getClassName().month;

      let enabled = false;
      if ((!calendar.state.dateFrom || calendar.state.dateFrom.getFullYear() <= calendar.state.year) && (!calendar.state.dateTo || calendar.state.dateTo.getFullYear() >= calendar.state.year)) {
        if ((!calendar.state.dateFrom || i >= calendar.state.dateFrom.getMonth()) && (!calendar.state.dateTo || i <= calendar.state.dateTo.getMonth())) {
          enabled = true;
        }
      }

      !enabled && (className += ' ' + calendar.getClassName().disabled);

      var onClick = enabled ? calendar._setMonth.bind(calendar, i + 1) : null;

      if (calendar.getDate() && calendar.state.year === calendar.getDate().getFullYear() && i === calendar.getDate().getMonth()) {
        className += ' ' + calendar.getClassName().active;
      } else if (calendar.state.year === today.getFullYear() && i === today.getMonth()) {
        className += ' ' + calendar.getClassName().today;
      }

      tds.push(
        <div className={className} title={name} key={i} onClick={onClick}>{name.substr(0, 3)}</div>
      );

      if (!((i + 1) % 4)) {
        trs.push(
          <tr className={calendar.getClassName().months} key={i}>
            <td colSpan='7' className={calendar.getClassName().specCell}>
              {tds}
            </td>
          </tr>
        );
        tds = [];
      }
    });

    return trs;
  },

  _getYearRows: function () {
    var trs = [];
    var tds = [];
    var today = new Date();

    for (var i = 0; i < 13; i++) {
      var className = this.getClassName().cell + ' ' + this.getClassName().xsCell + ' ' + this.getClassName().year;
      var year = this.state.century * 100 + this.state.decade * 10 + i - 1;


      let enabled = false;
      if ((!this.state.dateFrom || this.state.dateFrom.getFullYear() <= year) && (!this.state.dateTo || this.state.dateTo.getFullYear() >= year)) {
        enabled = true;
      }

      !enabled && (className += ' ' + this.getClassName().disabled);

      var onClick = enabled ? this._setYear.bind(this, year) : null;

      if (this.getDate() && year === this.getDate().getFullYear()) {
        className += ' ' + this.getClassName().active;
      } else if (year === today.getFullYear()) {
        className += ' ' + this.getClassName().today;
      } else if (i > 0 && i < 11) {
        className += ' ' + this.getClassName().activeSection;
      } else {
        className += ' ' + this.getClassName().anotherSection;
      }

      tds.push(
        <div className={className} key={i} onClick={onClick}>{year}</div>
      );

      if (!((i + 1) % 4)) {
        trs.push(
          <tr className={this.getClassName().years} key={i}>
            <td colSpan='7' className={this.getClassName().specCell}>
              {tds}
            </td>
          </tr>
        );
        tds = [];
      }
    }

    return trs;
  },

  _getHeader: function () {
    var prevClassName = this.getClassName().headCellPrev;
    !this._isChangeable(-1) && (prevClassName += ' ' + this.getClassName().disabled);

    var nextClassName = this.getClassName().headCellNext;
    !this._isChangeable(1) && (nextClassName += ' ' + this.getClassName().disabled);

    return (
      <thead className={this.getClassName().thead}>
      <tr className={this.getClassName().headRow}>
        <th className={prevClassName} onClick={this._prevClick}>
          <Glyphicon className={this.getClassName().glyphicon} glyphicon={this.getDefault().prevIcon}/>
        </th>
        <th className={this.getClassName().headCellHeader} colSpan='5'
            onClick={this.state.decade ? null : this._headerClick}>
          {this._getHeaderText()}
        </th>
        <th className={nextClassName} onClick={this._nextClick}>
          <Glyphicon className={this.getClassName().glyphicon} glyphicon={this.getDefault().nextIcon}/>
        </th>
      </tr>
      {this._getWeeks()}
      </thead>
    );
  },

  _getBody: function () {
    var state = this.state;
    var trs;

    if (state.month) {
      trs = this._getDayRows();
    } else if (state.year !== null) {
      trs = this._getMonthRows();
    } else if (state.decade !== null) {
      trs = this._getYearRows();
    }

    return (
      <tbody>
      {trs}
      </tbody>
    );
  },

  _onSwipeEnd: function () {
    (this.isSwipedRight() && this.setPrevious()) || (this.isSwipedLeft() && this.setNext());
    return this;
  },

  _getTableProps: function () {
    var state = this.state;
    var className = this.getClassName().table;

    if (state.month) {
      className += ' ' + this.getClassName().monthTable;
    } else if (state.year !== null) {
      className += ' ' + this.getClassName().yearTable;
    } else if (state.decade !== null) {
      className += ' ' + this.getClassName().decadeTable;
    }

    return {
      className: className,
      onTouchStart: this.swipeOnTouchStart,
      onTouchMove: this.swipeOnTouchMove,
      onTouchEnd: this.swipeOnTouchEnd.bind(this, this._onSwipeEnd)
    };
  },

  // Render
  render: function () {
    return (
      <div {...this._getMainAttrs()}>
        <table {...this._getTableProps()}>
          {this._getHeader()}
          {this._getBody()}
        </table>
      </div>
    );
  }
});

export default Calendar;
