import {Tools} from '../../common/common.js';

export const FormMixin = {

  //@@viewOn:mixins
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    'UU5_Forms_FormMixin': {
      warnings: {
        formInForm: 'Form control %s should not be placed in other form control %s.',
        nonRegistered: 'Form control with ID %s cannot be unregistered. Component with the ID is not registered.',
        noName: 'Form control has not any name. It will be used its ID %s.'
      },
      errors: {
        duplicateId: 'Duplicate id \'%s\' of a form control.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount () {
    this.formControls = {};

    var parentForm = this.getParentByType('isForm');
    if (parentForm) {
      this.showWarning('formInForm', [this.getTagName(), parentForm.getTagName()], {
        mixinName: 'UU5_Forms_FormMixin'
      });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  eachFormControl (func) {
    for (var id in this.formControls) {
      var result = func(this.formControls[id]);
      if (result === false) {
        break;
      }
    }
    return this.formControls;
  },

  isValid () {
    var result = true;

    if (typeof this.isValid_ === 'function') {
      result = this.isValid_();
    } else {
      this.eachFormControl((formControl) => {
        var newResult = typeof formControl.isValid !== 'function' || formControl.isValid();

        if (result) {
          result = newResult;
        }
      });
    }

    return result;
  },

  // for our parent type checking
  isForm: function () {
    return true;
  },

  registerFormControl (id, formControl) {
    var registeredControl = this.formControls[id];
    if (registeredControl) {
      this.showError('duplicateId', id, {
        mixinName: 'UU5_Forms_FormMixin',
        context: {
          registeredFormControl: {
            tagName: registeredControl.getTagName(),
            props: registeredControl.props,
            component: registeredControl
          },
          newFormControl: {
            tagName: formControl.getTagName(),
            props: formControl.props,
            component: formControl
          }
        }
      });
    } else {
      this.formControls[id] = formControl;
    }
  },

  unregisterFormControl (id) {
    if (!this.formControls[id]) {
      this.showWarning('nonRegistered', id, {
        mixinName: 'UU5_Forms_FormMixin'
      });
    } else {
      delete this.formControls[id];
    }
  },

  getValues () {
    var values = {};
    this._eachFormControlWithName(function (name, input) {
      values[name] = input.getValue();
    });
    return values;
  },

  getInputs () {
    var inputs = {};
    this._eachFormControlWithName(function (name, input) {
      inputs[name] = input;
    });
    return inputs;
  },

  getInputByName (name) {
    var result = null;

    this._eachFormControlWithName((k, input) => {
      var compare = k === name;
      compare && (result = input);
      return !compare
    });

    return result;
  },

  reset (setStateCallback) {
    var form = this;

    var counter = 0;
    for (var id in this.formControls) {
      typeof this.formControls[id].reset === 'function' && counter++;
    }

    var newSetStateCallback = Tools.buildCounterCallback(setStateCallback, counter);

    for (var id in this.formControls) {
      typeof form.formControls[id].reset === 'function' && form.formControls[id].reset(newSetStateCallback);
    }

    return this;
  },

  getSaveFormEvents(func) {
    const CTRL_KEY = 17, S_KEY = 83;
    let down = false;

    return {
      onKeyDown: (e) => {
        let key = e.which || e.keyCode;
        let isCtrlPressed = e.ctrlKey ? e.ctrlKey : key === CTRL_KEY;

        if (isCtrlPressed && key === S_KEY) {
          if (down) return;
          down = true;

          e.preventDefault();
          e.stopPropagation();
          if (typeof func === 'function') func({ component: this, event: e })
        }
      },
      onKeyUp: (e) => {
        let key = e.which || e.keyCode;
        let isCtrlPressed = e.ctrlKey ? e.ctrlKey : key === CTRL_KEY;

        if (isCtrlPressed && key === S_KEY) {
          down = false;
        }
      }
    };

  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _eachFormControlWithName (func) {
    var form = this;
    this.eachFormControl((input) => {
      var name = input.getName();
      if (!name) {
        form.showWarning('noName', input.getId(), {
          mixinName: 'UU5_Forms_FormMixin',
          context: {
            input: {
              tagName: input.getTagName(),
              props: input.props,
              component: input
            }
          }
        });
        name = input.getId();
      }
      func(name, input);
    });
    return this;
  }
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  //@@viewOff:render
};

export default FormMixin;
