import React from 'react';
import {BaseMixin} from './../../common/common.js';
import Environment from './../../environment/environment.js';

import {Button, Glyphicon} from './../../bricks/bricks.js';


import Message from './message.js';
import InputMixin from './../mixins/input-mixin.js';

import './input-wrapper.less';

const INITIAL_FEEDBACK = 'initial';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "UU5.Forms.InputWrapper",
    classNames: {
      main: "uu5-forms-input-wrapper"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    required: React.PropTypes.bool,
    feedback: React.PropTypes.string,
    message: React.PropTypes.any,
    buttons: React.PropTypes.arrayOf(React.PropTypes.shape({
      glyphicon: React.PropTypes.string,
      disabled: React.PropTypes.bool,
      onClick: React.PropTypes.func,
      pressed: React.PropTypes.bool
    })),
    slider: React.PropTypes.bool,
    datetimepicker: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      required: false,
      feedback: 'initial',
      message: null,
      buttons: null,
      slider: false,
      datetimepicker: false
    }
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(newProps, newState){
    let result = false;
    if (newProps.children != this.props.children || newProps.required != this.props.required || newProps.feedback != this.props.feedback || newProps.message != this.props.message) {
      result = true;
    }
    return result;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods


  //@@viewOn:componentSpecificHelpers
  _getMainAttrs(){
    let mainAttrs = this.getMainAttrs();
    mainAttrs.className += ' ' + this.props.colWidth;

    switch (this.props.feedback) {
      case 'success':
        mainAttrs.className += ' color-schema-' + Environment.getColorSchema('success');
        break;
      case 'warning':
        mainAttrs.className += ' color-schema-' + Environment.getColorSchema('warning');
        break;
      case 'error':
        mainAttrs.className += ' color-schema-' + Environment.getColorSchema('danger');
        break;
      default:
        mainAttrs.className += ' color-schema-' + Environment.getColorSchema('info');
        break
    }

    return mainAttrs;
  },

  _getButtons(){
    return (this.props.buttons && this.props.buttons.length > 0) ? this.props.buttons.map((button, i) => {
      let className = (this.props.datetimepicker && i === 0) ? 'uu5-forms-input-button-wrapper uu5-forms-input-button-wrapper-padding-right' : 'uu5-forms-input-button-wrapper';
      return <span key={i} className={className}>
        <Button
          className="uu5-forms-input-button"
          disabled={button.disabled}
          onClick={button.onClick}
          pressed={button.pressed}
          colorSchema={button.colorSchema}
          mainAttrs={button.mainAttrs}
        >
          <Glyphicon
            glyphicon={button.glyphicon}
            className="uu5-forms-input-button-glyphicon"
          />
        </Button>
      </span>
    }) : null;
  },

  _getRenderResult(){
    let result;
    let message = this.props.message && <Message feedback={this.props.feedback} content={this.props.message}/>;

    if (this.props.datetimepicker) {
      let children = React.Children.toArray(this.props.children);
      let buttons = this._getButtons();
      result = <div {...this._getMainAttrs()}>
        <div className="uu5-forms-input-wrapper-cover">
          {children[0]}
          {buttons && buttons[0]}
          {children.slice(1)}
          {buttons && buttons[1]}
        </div>
        {message}
      </div>;
    } else if (this.props.buttons && this.props.buttons.length > 0) {
      result = <div {...this._getMainAttrs()}>
        <div className="uu5-forms-input-wrapper-cover">
          {React.Children.toArray(this.props.children)}
          {this._getButtons()}
        </div>
        {message}
      </div>;
    } else if (this.props.slider) {
      result = <div {...this._getMainAttrs()}>
        <div className="uu5-forms-input-wrapper-cover">
          {React.Children.toArray(this.props.children)}
        </div>
        {message}
      </div>;
    } else {
      result = <div {...this._getMainAttrs()}>
        {React.Children.toArray(this.props.children)}
        {message}
      </div>
    }

    return result;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this._getRenderResult();
  }
  //@@viewOn:render
});
