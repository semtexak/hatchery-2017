import React from 'react';
import {BaseMixin, ElementaryMixin, LsiMixin} from './../../common/common.js';

import {Span} from './../../bricks/bricks.js';

import {Link, Glyphicon} from './../../bricks/bricks.js';

import './items-input.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "UU5.Forms.ItemsInput",
    classNames: {
      main: "uu5-forms-items-input",
      loading: 'uu5-forms-items-loading-icon',
      value: 'uu5-forms-input-form-item-value'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.object,
      React.PropTypes.arrayOf(React.PropTypes.string),
      React.PropTypes.arrayOf(React.PropTypes.object)
    ]),
    multiple: React.PropTypes.bool,
    placeholder: React.PropTypes.oneOfType([
      React.PropTypes.object,
      React.PropTypes.string
    ]),
    onClick: React.PropTypes.func,
    onItemClick: React.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      value: '',
      multiple: false,
      placeholder: null,
      onClick: null,
      onItemClick: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  changeValue (index, e, setStateCallback) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange({ value: index, event: e, component: this, setStateCallback: setStateCallback });
    }
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPlaceholder(){
    let placeholder;
    if (this.props.placeholder) {
      if (typeof this.props.placeholder === 'string') {
        placeholder = this.props.placeholder;
      } else if (typeof this.props.placeholder === 'object') {
        placeholder = this.getLSIItem(this.props.placeholder);
      }
    }

    return placeholder;
  },

  _getFeedbackIcon(){
    return this.props.loading ? <span className={this.getClassName().loading} /> :
      <Glyphicon glyphicon={this.props.glyphicon} />
  },

  _getItems(){
    let value = this.props.value;
    if (this.props.multiple && this.props.value && this.props.value instanceof Array) {
      value = this.props.value.map((item, key) => (
        <Span
          className="uu5-forms-items-input-item uu5-common-bg color-schema-blue"
          key={key}
        >
          {React.Children.toArray(item)}
          <Link
            className="uu5-forms-items-input-item-link"
            onClick={(link, e) => {
              e.stopPropagation();
              this.props.onItemClick({ component: this, event: e, value: item, index: key });
            }}
          >
            <Glyphicon glyphicon="uu-glyphicon-cross" className="uu5-forms-items-input-item-glyphicon" />
          </Link>
        </Span>
      ))
    } else {
      value = React.Children.toArray(this.props.value);
    }

    value.length < 1 && (value = this._getPlaceholder());
    return value;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      <div {...this.getMainAttrs()} onClick={this.props.onClick}>
        <span className={this.getClassName().value}>
          {this._getItems()}
        </span>
        {this._getFeedbackIcon()}
      </div>
    );
  }
  //@@viewOn:render
});
