import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin} from './../common/common.js';
import Environment from '../environment/environment.js';

import InputWrapper from './internal/input-wrapper.js';
import ItemsInput from './internal/items-input.js';

import ChoiceMixin from './mixins/choice-mixin.js'
import InputMixin from './mixins/input-mixin.js'

import './file.less';

export const File = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    InputMixin,
    ChoiceMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Forms.File',
    classNames: {
      main: 'uu5-forms-file',
      input: 'uu5-forms-file-input'
    },
    defaults: {
      fileIcon: 'glyphicon-file'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.arrayOf(React.PropTypes.string)
    ]),
    multiple: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps () {
    return {
      value: null,
      multiple: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount(){
    if (this.props.onValidate && typeof this.props.onValidate === 'function') {
      this._validateOnChange({value: this.state.value, event: null, component: this})
    }
  },

  componentDidMount(){
    let dropZone = document.getElementById(this.getId());
    Environment.EventListener.addEvent(dropZone, 'dragover', this.getId(), this._handleDragOver);
    Environment.EventListener.addEvent(dropZone, 'drop', this.getId(), this._handleFileSelect);
    return this;
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onChange (e) {
    this._setValue(e.target.files);
    return this;
  },

  _setValue(files, setStateCallback){
    var value = null;
    if (files.length) {
      if (this.props.multiple) {
        value = [];
        for (var i = 0; i < files.length; i++) {
          value.push(files[i]);
        }
      } else {
        value = files[0];
      }
    }

    if (this._checkRequired({value: value})) {
      if (typeof this.props.onValidate === 'function') {
        this._validateOnChange({value: value, event: null, component: this})
      } else {
        this.props.required ? this.setSuccess(null, value, setStateCallback) : this.setInitial(null, value, setStateCallback);
      }
    }

    return this;
  },

  _getFeedbackIcon(){
    let icon = this.props.required ? this.props.successGlyphicon : null;
    switch (this.getFeedback()) {
      case 'success':
        icon = this.props.successGlyphicon;
        break;
      case 'warning':
        icon = this.props.warningGlyphicon;
        break;
      case 'error':
        icon = this.props.errorGlyphicon;
        break;
    }
    return icon;
  },

  _getTextInputAttrs () {
    var props = {};

    if (!this.state.isReadOnly && !this.isDisabled()) {
      props.onClick = ()=> this._open()
    }

    return props;
  },

  _getMainAttrs(){
    let attrs = this._getInputAttrs();

    return attrs;
  },

  _validateOnChange(opt){
    let result = typeof this.props.onValidate === 'function' ? this.props.onValidate(opt) : null;
    if (result) {
      if (typeof result === 'object') {
        if (result.feedback) {
          this.setFeedback(result.feedback, result.message, result.value);
        } else {
          this.setState({value: opt.value});
        }
      } else {
        this.showError('validateError', null, {context: {event: e, func: this.props.onValidate, result: result}});
      }
    }
    return this;
  },

  _getFeedbackIcon(){
    let icon = this.props.required ? this.props.successGlyphicon : null;
    switch (this.getFeedback()) {
      case 'success':
        icon = this.props.successGlyphicon;
        break;
      case 'warning':
        icon = this.props.warningGlyphicon;
        break;
      case 'error':
        icon = this.props.errorGlyphicon;
        break;
    }
    return icon;
  },

  _open(){
    document.getElementById(this.getId() + '-file').click();
    return this;
  },

  _handleFileSelect(e) {
    e.stopPropagation();
    e.preventDefault();

    this._setValue(e.dataTransfer.files);

    return this;
  },

  _handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.

    return this;
  },

  _getFilesName(){
    let result = '';
    let value = this.state.value;

    if (value) {
      if (Array.isArray(value)) {
        result = value.map(function (file) {
          return file.name;
        }).join(', ');
      } else {
        result = value.name;
      }
    }

    return result;
  },

  _checkRequired(opt) {
    let result = true;
    if (this.props.required && !opt.value) {
      result = false;
      this.setError(this.props.requiredMessage, opt.value);
    }

    return result;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render () {
    let inputId = this.getId() + '-input';
    let buttons = !this.isReadOnly() && !this.props.buttonHidden ? [{
      glyphicon: this.getDefault().fileIcon,
      disabled: this.isDisabled(),
      onClick: ()=> this._open(),
      colorSchema: 'default'
    }] : null;


    return (
      <div {...this._getMainAttrs()} id={this.getId()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper([
            <ItemsInput
              id={inputId}
              name={this.props.name || inputId}
              value={this._getFilesName()}
              placeholder={this.props.placeholder}
              multiple={this.props.multiple}
              disabled={this.isDisabled() || this.isLoading()}
              readonly={this.isReadOnly()}
              loading={this.isLoading()}
              onItemClick={(opt) => {
                this.removeItem(opt)
              }}
              onClick={(!this.isReadOnly() && !this.isDisabled()) ? ()=> this._open() : null}
              glyphicon={this._getFeedbackIcon()}
            />,

            <input
              type="file"
              id={this.getId() + '-file'}
              multiple={this.props.multiple}
              onChange={this._onChange}
              className={this.getClassName().input}
            />],
          buttons)}
      </div>
    );
  }
  //@@viewOff:render
});

export default File;
