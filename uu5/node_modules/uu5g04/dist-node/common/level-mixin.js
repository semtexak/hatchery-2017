import React from 'react';

export const LevelMixin = {

  //@@viewOn:statics
  statics: {
    UU5_Common_LevelMixin: {
      requiredMixins: ['UU5_Common_BaseMixin'],
      defaults: {
        minLevel: 0,
        maxLevel: 6
      },
      warnings: {
        levelMismatch: 'Component level %s is lower than parent level %s.',
        levelMax: 'Maximum level of component is 6 but is set %d.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    level: React.PropTypes.oneOf(['0', '1', '2', '3', '4', '5', '6', 0, 1, 2, 3, 4, 5, 6])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      level: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    // initialize
    this.registerMixin('UU5_Common_LevelMixin');
    // state
    return {
      level: null
    };
  },

  componentWillMount: function () {
    this.setState({ level: this.checkLevel() });
  },

  componentWillReceiveProps: function (nextProps) {
    this.getLevel() !== nextProps.level && this.setState({ level: this.checkLevel() });
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5_Common_LevelMixin: function () {
    return this.hasMixin('UU5_Common_LevelMixin');
  },

  getLevel: function () {
    return this.state.level;
  },

  getUU5_Common_LevelMixinProps: function () {
    return {
      level: this.props.level
    };
  },

  getUU5_Common_LevelMixinPropsToPass: function () {
    return this.getUU5_Common_LevelMixinProps();
  },

  shouldIncreaseLevel: function (parentLevelComponent) {
    return !parentLevelComponent || parentLevelComponent && parentLevelComponent.getOpt('dummyLevel')
      ? false
      : (
      this.getOpt('increaseLevel') ||
      this.getHeader && this.getHeader() ||
      this.getFooter && this.getFooter()
    );
  },

  checkLevel: function () {
    var level = typeof this.props.level === 'string' ? parseInt(this.props.level) : this.props.level;
    var maxLevel = this.getDefault('maxLevel', 'UU5_Common_LevelMixin');
    var parentLevelComponent = this.getParentByType('hasUU5_Common_LevelMixin');
    var calculatedLevel = parentLevelComponent ? parentLevelComponent.getLevel() : this.getDefault('minLevel', 'UU5_Common_LevelMixin');
    this.shouldIncreaseLevel(parentLevelComponent) && calculatedLevel++;
    level = level || calculatedLevel;

    //check level hierarchy
    if (level < calculatedLevel) {
      this.showWarning(
        'levelMismatch', [level, calculatedLevel], {
          mixinName: 'UU5_Common_LevelMixin',
          context: {
            parent: {
              tagName: parentLevelComponent ? parentLevelComponent.getTagName() : null,
              component: parentLevelComponent
            }
          }
        }
      );
    }

    //check maxLevel
    if (level > maxLevel) {
      this.showWarning(
        'levelMax', level, {
          mixinName: 'UU5_Common_LevelMixin',
          context: {
            parent: {
              tagName: parentLevelComponent && parentLevelComponent.getTagName(),
              component: parentLevelComponent
            }
          }
        }
      );
      level = maxLevel;
    }
    return level;
  }
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

};

export default LevelMixin;
