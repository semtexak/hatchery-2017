import React from 'react';
import Environment from '../environment/environment.js';

export const SessionMixin = {

  //@@viewOn:statics
  statics: {
    UU5_Common_SessionMixin: {
      requiredMixins: ['UU5_Common_BaseMixin'],
      errors: {
        sessionNotFound: 'Session has to be set.'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    session: React.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      session: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // initialize
    this.registerMixin('UU5_Common_SessionMixin');
    return null;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5_Common_SessionMixin() {
    return this.hasMixin('UU5_Common_SessionMixin');
  },

  getUU5_Common_SessionMixinProps() {
    return {
      session: this.props.session
    };
  },

  getUU5_Common_SessionMixinPropsToPass() {
    return this.getUU5_Common_SessionMixinProps();
  },

  getSession() {
    let session = this.props.session || Environment.getSession();
    !session && this.showError('sessionNotFound', null, { mixinName: 'UU5_Common_SessionMixin' });
    return session;
  },

  login() {
    let session = this.getSession();
    session && session.login();
    return this;
  },

  logout() {
    let session = this.getSession();
    session && session.logout();
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers
};

export default SessionMixin;
