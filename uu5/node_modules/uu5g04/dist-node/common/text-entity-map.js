export const HtmlEntityMap = {
  re: /(&#?[a-z0-9]+;)/g,
  items: {
    '&amp;': '&',
    '&#38;': '&',
    '&apos;': "'",
    '&#39;': "'",
    '&quot;': '"',
    '&#34;': '"',
    '&lt;': '<',
    '&#060;': '<',
    '&gt;': '>',
    '&#062;': '>',
    '&hellip;': '…',
    '&#133;': '…',
    '&mdash;': '—',
    '&#8212;': '—',
    '&pi;': 'π',
    '&#8719;': 'π',
    '&reg;': '®',
    '&#174;': '®',
    '&#8730;': '√',
    '&radic;': '√',
    '&#8734;': '∞',
    '&infin;': '∞',
    '&#160;': ' ',
    '&nbsp;': ' ',
    '&#8592;': '←',
    '&larr;': '←',
    '&#8594;': '→',
    '&rarr;': '→',
    '&#8595;': '?',
    '&darr;': '?',
    '&#169;': '©',
    '&copy;': '©',
    '&trade':'™',
    '&pound;':'£',
    '&euro':'€',
    '&prod;':'∏',
    '&sum;':'∑',
    '&int;':'∫',
    '&le;':'≤',
    '&ge;':'≥'
  }
};

export const AsciiEmojiMap = {
  //:) :D :O :* :( :| :S :Z :$ :P :/   ;-)     :'-(   ,:-(   ,:-)   O:-)       8-) X-)    :-")  :'-)        :,'-(          ";-(   ]:-)   <3
  re:/(:-?[)(DOo*|$SsZzP/@]|;-?\)|:[',]-?\(|,:-?\(|,:-?\)|[0oO]:-?\)|[B8Xx]-?\)|:-"\)|:[',]-?[)D]|:(?:,'|',)-?\(|";-?\(|]:-?\)|<\/?3)/g,
  items: {
    ":)": "😃",
    ":-)": "😃",
    ';)': "😉",
    ';-)': "😉",
    ":-(": "😦",
    ":(": "😦",
    ":'(": "😢",
    ":'-(": "😢",
    ":,(": "😢",
    ":,-(": "😢",
    ":D": "😄",
    ":-D": "😄",
    ":o": "😮",
    ":O": "😮",
    ":-o": "😮",
    ":-O": "😮",
    ":*": "😘",
    ":-*": "😘",
    ",:(": "😓",
    ",:-(": "😓",
    ",:)": "😅",
    ",:-)": "😅",
    "0:)": "😇",
    "0:-)": "😇",
    "o:)": "😇",
    "O:)": "😇",
    "O:-)": "😇",
    "o:-)": "😇",
    "8)": "😎",
    "8-)": "😎",
    "B)": "😎",
    "B-)": "😎",
    ':")': "😊",
    ':-")': "😊",
    ":$": "😒",
    ":-$": "😒",
    ":')": "😂",
    ":'-)": "😂",
    ":'-D": "😂",
    ":'D": "😂",
    ":,-)": "😂",
    ":,)": "😂",
    ":,-D": "😂",
    ":,D": "😂",
    ":,'(": "😭",
    ":,'-(": "😭",
    '";(': "😭",
    '";-(': "😭",
    ":-/": "😕",
    ":/": "😕",
    ":-@": "😡",
    ":@": "😡",
    ":-P": "😛",
    ":P": "😛",
    ":-S": "😒",
    ":-Z": "😒",
    ":S": "😒",
    ":Z": "😒",
    ":-s": "😒",
    ":-z": "😒",
    ":s": "😒",
    ":z": "😒",
    ":-|": "😐",
    ":|": "😐",
    "]:)": "😈",
    "]:-)": "😈",
    "X-)": "😆",
    "x-)": "😆",
    "X)": "😆",
    "x)": "😆",
    '</3': '💔',
    '<3': '💗'
  }
};

export const ExtendedEmojiMap = {
  re:/#\(([a-z\-]+)\)/g,
  items: {
    'cow' : '🐄',
    'horse' : '🐎',
    'tiger' : '🐅',
    'elephant' : '🐘',
    'unicorn-face' : '🦄',
    'pig' : '🐖',
    'pig-face' : '🐷',
    'pig-nose' : '🐽',
    'rat' : '🐀',
    'hamster-face' : '🐹',
    'bat' : '🦇',
    'chicken' : '🐔',
    'dolphin' : '🐬',
    'fish' : '🐟',
    'crocodile' : '🐊',
    'snake' : '🐍',
    'whale' : '🐋',
    'octopus' : '🐙',
    'spider' : '🕷',
    'panda-face' : '🐼',
    'bear-face' : '🐻',
    'boar' : '🐗',
    'dog' : '🐕',
    'dog-face' : '🐶',
    'cat' : '🐈',
    'cat-face' : '🐱',
    'fire' : '🔥',
    'skull-with-crossbones' : '☠',
    'bomb' : '💣',
    'light-bulb' : '💡',
    'hammer' : '🔨',
    'wrench' : '🔧',
    'key' : '🔑',
    'gear' : '⚙',
    'coffin' : '⚰',
    'moai' : '🗿',
    'beer' : '🍺',
    'volcano' : '🌋',
    'pile-of-poo' : '💩',
    'shit' : '💩',
    'czechia' : '🇨🇿',
    'united-states' : '🇺🇸',
    'germany' : '🇩🇪',
    'ukraine' : '🇺🇦',
    'slovakia' : '🇸🇰',
    'netherlands' : '🇳🇱',
    'spain' : '🇪🇸',
    'united-kingdom' : '🇬🇧',
    'croatia' : '🇭🇷'
  }
};

export const TextEntityMap = {
  _re: null,
  _htmlEntity: true,
  get htmlEntity() {return this._htmlEntity},
  set htmlEntity(s) {
    if (s !== this._htmlEntity) {
      this._htmlEntity = s;
      this.recompile();
    }
  },
  _htmlEntityMap : HtmlEntityMap,
  replaceHtmlEntity(key) { return this._htmlEntityMap[key] || key },

  _asciiEmoji: true,
  get asciiEmoji() {return this._asciiEmoji},
  set asciiEmoji(s) {
    if (s !== this.asciiEmoji) {
      this._asciiEmoji = s;
      this.recompile();
    }
  },
  _asciiEmojiMap : AsciiEmojiMap,
  replaceAsciiEmoji(key) { return this._asciiEmojiMap[key] || key },

  _extendedTextEntity: true,
  get extendedTextEntity() {return this._extendedTextEntity},
  set extendedTextEntity(s) {
    if (s !== this._extendedTextEntity) {
      this._extendedTextEntity = s;
      this.recompile();
    }
  },
  _extendedTextEntityMapList:[ExtendedEmojiMap],
  _textEntityRegexGroups:{},

  replace(text) {
    const eteg = this._textEntityRegexGroups;
    const count = this._reGroupsCount;

    return text.replace(this._re,(match,esc,...groups) => {
      let r = match;
      if (esc) r = match.slice(1);
      else
        for (let i = 0; i < count; i++) {
          if (groups[i]) { r = eteg[i].items[groups[i]]; break}
        }
      return r;
    });
  },

  addExtendedTextEntityMap(map) {
    if (!this._extendedTextEntityMapList.some( item => item === map )) this._extendedTextEntityMapList.push(map);
  },
  removeExtendedTextEntityMap(map) {
    this._extendedTextEntityMapList = this._extendedTextEntityMapList.filter( item => item !== map)
  },

  get extendedTextEntityMapList() { return this._extendedTextEntityMapList },

  recompile() {
    if (this.htmlEntity || this.asciiEmoji || this.extendedTextEntity) {
      let reA = [];
      let i = 0;
      this._textEntityRegexGroups = {};
      if (this.htmlEntity) {
        reA.push(this._htmlEntityMap.re.source);
        this._textEntityRegexGroups[i] = this._htmlEntityMap;
        i++;
      }
      if (this.asciiEmoji) {
        reA.push(this._asciiEmojiMap.re.source);
        this._textEntityRegexGroups[i] = this._asciiEmojiMap;
        i++;
      }
      if (this.extendedTextEntity) {
        this._extendedTextEntityMapList.forEach(item => {
          reA.push(item.re.source);
          this._textEntityRegexGroups[i] = item;
          i++;
        });
      }
      this._reGroupsCount = i;
      this._re = new RegExp(`(\\\\)?(?:${ reA.join('|') })`,'g');

    } else
      this._re = null;
  }
};

//precompile regex
TextEntityMap.recompile();

