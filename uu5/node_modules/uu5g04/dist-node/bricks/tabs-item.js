import React from 'react';
import {BaseMixin, ElementaryMixin, NestingLevelMixin, SectionMixin} from '../common/common.js';
import Environment from '../environment/environment.js';

import './tabs-item.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    SectionMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Tabs.Item',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: 'uu5-bricks-tabs-item tab-pane',
      hidden: 'uu5-bricks-tabs-item-hidden',
      visible: 'uu5-bricks-tabs-item-visible',
      fade: 'uu5-bricks-tabs-item-fade '
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    _fade: React.PropTypes.bool,
    _active: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      _fade: false,
      _active: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      visibility: this.props._active
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (!nextProps._active && (nextProps._active != this.props._active)) {
      this.setState({ visibility: false })
    }
  },

  componentDidUpdate: function (prevProps, prevState) {
    if (this.props._fade && this.props._active && (prevProps._active != this.props._active)) {
      setTimeout(() => this.setAsyncState({ visibility: true }), 5);
    } else if (this.props._active && (prevProps._active != this.props._active)) {
      this.setState({ visibility: true })
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let mainAttrs = this.buildMainAttrs();

    if (this.props._active) {
      if (this.state.visibility) {
        mainAttrs.className += ' ' + this.getClassName().visible;
      } else {
        mainAttrs.className += ' ' + this.getClassName().hidden;
      }
    }
    if (this.props._fade) {
      mainAttrs.className += ' ' + this.getClassName().fade;
    }

    return (
      this.getNestingLevel()
        ? (
        <div {...mainAttrs}>
          {this.getChildren()}
          {this.getDisabledCover()}
        </div>
      ) : null
    )
  }

  //@@viewOff:render
});
