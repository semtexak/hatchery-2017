import React from 'react';

import Environment from '../environment/environment.js';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import ContentMixin from '../common/content-mixin.js';
import ColorSchemaMixin from '../common/color-schema-mixin.js';
import Tools from '../common/tools.js';

import './text.less';

export const Text = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin,
    ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Text',
    nestingLevelList: Environment.getNestingLevelList('smallBox', 'inline'),
    classNames: {
      main: 'uu5-bricks-text uu5-common-text',
      nestingLevelSmallBox: 'uu5-bricks-text-nesting-level-small-box',
      nestingLevelInline: 'uu5-bricks-text-nesting-level-inline',
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs: function () {
    let attrs = this.getMainAttrs();

    switch (this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName().nestingLevelInline;
        break;
      default:
        attrs.className += ' ' + this.getClassName().nestingLevelSmallBox;
    }

    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let component;
    switch (this.getNestingLevel()) {
      case 'smallBox':
        component = (
          <div {...this._getMainAttrs()} >
            {this.getChildren()}
            {this.getDisabledCover()}
          </div>
        );
        break;
      case 'inline':
        component = (
          <span {...this._getMainAttrs()} >
            {this.getChildren()}
            {this.getDisabledCover()}
          </span>
        );
        break;
      default:
        component = null;
    }

    return component;

  }
  //@@viewOff:render
});

var createColoredText = function (colorSchema, background) {
  return (
    React.createClass({
      render: function () {
        return (
          <Text {...this.props} colorSchema={colorSchema} background={background}>
            {this.props.children && React.Children.toArray(this.props.children)}
          </Text>
        );
      }
    })
  )
};

Environment.colorSchema.forEach(function (colorSchema) {
  var colorSchemaCapitalize = Tools.getCamelCase(colorSchema);
  Text[colorSchema] = createColoredText(colorSchema);
  //Text['bg' + colorSchemaCapitalize] = createColoredText(colorSchema, true);
});

export default Text;
