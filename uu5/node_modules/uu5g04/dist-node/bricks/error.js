import React from 'react';
import Environment from '../environment/environment.js';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import ContentMixin from '../common/content-mixin.js';
import Text from './text.js';

import './error.less';

export const Error = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Error',
    nestingLevelList: Environment.getNestingLevelList('smallBox', 'inline'),
    classNames: {
      main: 'uu5-bricks-error uu5-common-padding-5',
      bg: 'uu5-common-bg',
      silent: 'uu5-bricks-error-silent'
    },
    defaults: {
      content: 'Error'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    //inline: React.PropTypes.bool,
    errorData: React.PropTypes.object,
    errorDataSpace: React.PropTypes.number,
    silent: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      //inline: false,
      errorData: null,
      errorDataSpace: 2,
      silent: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainProps: function () {
    let props = this.getMainPropsToPass();

    props.nestingLevel = this.getNestingLevel();

    if (this.props.silent) {
      props.colorSchema = 'grey';
      props.className += ' ' + this.getClassName().silent;
    } else {
      props.colorSchema = 'danger';
      props.className += ' ' + this.getClassName().bg;
    }

    let message = props.content || this.props.children || this.getDefault().content;
    let errorData = this.props.errorData ? <UU5.Bricks.Pre
        content={JSON.stringify(this.props.errorData, null, this.props.errorDataSpace)}/> : null;

    props.content = errorData ? [message, errorData] : message;

    return props;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      <Text {...this._getMainProps()}/>
    );
  }
  //@@viewOff:render
});

export default Error;
