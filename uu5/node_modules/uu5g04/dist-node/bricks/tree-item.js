import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin, NestingLevelMixin} from './../common/common.js';
import Environment from '../environment/environment.js';
import Link from './link.js';
import Glyphicon from './glyphicon.js';
import List from './tree-list.js';

import {Span} from './bricks.js';

import './tree-item.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Tree.Item',
    nestingLevelList: Environment.getNestingLevelList('box', 'smallBox'),
    classNames: {
      main: 'uu5-bricks-tree-item'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: React.PropTypes.any,
    items: React.PropTypes.array,
    glyphiconExpanded: React.PropTypes.string,
    glyphiconCollapsed: React.PropTypes.string,
    expanded: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      label: null,
      items: null,
      glyphiconExpanded: null,
      glyphiconCollapsed: null,
      expanded: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      expanded: this.props.expanded
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled && nextProps.expanded !== this.props.expanded && nextProps.expanded !== this.isExpanded()) {
      this.setState({expanded: nextProps.expanded});
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  expand: function (setStateCallback) {
    this.setState({expanded: true}, setStateCallback);
  },

  collapse: function (setStateCallback) {
    this.setState({expanded: false}, setStateCallback);
  },

  toggleExpanded: function (setStateCallback) {
    this.setState(function (state) {
      return {expanded: !state.expanded};
    }, setStateCallback);
  },

  isExpanded: function () {
    return this.state.expanded;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems: function () {
    var result = null;

    if (this.props.items || this.props.content || this.props.children) {
      result = (
        <List
          parent={this}
          items={this.props.items || this.getChildren()}
          glyphiconExpanded={this.props.glyphiconExpanded}
          glyphiconCollapsed={this.props.glyphiconCollapsed}
          hidden={!this.isExpanded()}
          controlled
        />
      );
    }

    return result;
  },

  _onToggle: function () {
    this.toggleExpanded();
    return this;
  },

  _getGlyphicon: function () {
    var glyphicon;

    if (this.props.items || this.props.content || this.props.children) {
      if (this.isExpanded()) {
        glyphicon = this.props.glyphiconExpanded;
      } else {
        glyphicon = this.props.glyphiconCollapsed
      }
    }

    var link = null;
    if (glyphicon) {
      link = (
        <Link onClick={this._onToggle} parent={this}>
          <Glyphicon glyphicon={glyphicon}/>
        </Link>
      );
    } else {
      link = <Glyphicon mainAttrs={{style: {visibility: 'hidden'}}}/>
    }

    return link;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <li {...this.buildMainAttrs()}>
            {this._getGlyphicon()} <Span content={this.props.label}/>
            {this._getItems()}
            {this.getDisabledCover()}
          </li>
        ) : null
    );
  }
  //@@viewOff:render
});
