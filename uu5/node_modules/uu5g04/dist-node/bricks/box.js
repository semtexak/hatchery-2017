import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  ContentMixin,
  NestingLevelMixin,
  ColorSchemaMixin,
  Tools
} from '../common/common.js';
import Environment from '../environment/environment.js';
import Modal from './modal.js';

import './box.less';

export const Box = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin,
    ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Box',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: 'uu5-bricks-box uu5-bricks-text uu5-common-text uu5-common-bg',
      nestingLevelSmallBox: 'uu5-bricks-box-nesting-level-small-box uu5-common-padding-10',
      nestingLevelInline: 'uu5-bricks-box-nesting-level-inline',
      modal: 'uu5-bricks-box-modal',
      click: 'uu5-bricks-box-click'
    },
    opt: {
      nestingLeveWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    infoHeader: React.PropTypes.any,
    infoContent: React.PropTypes.any,
    disableClick: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      infoHeader: 'Info',
      infoContent: null,
      disableClick: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  openInfo(modalProps, setStateCallback) {
    if (this.props.infoContent || modalProps.content) {
      this.modal.open(modalProps, setStateCallback);
    }
    return this;
  },

  closeInfo(setStateCallback) {
    this.modal.close(true, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    var attrs = this.getMainAttrs();

    if (this.props.infoContent && !this.props.disableClick) {
      attrs.onClick = () => !this.isDisabled() && this.modal.open();
      attrs.className += ' ' + this.getClassName().click
    }

    switch (this.getNestingLevel()) {
      case 'inline':
        attrs.className += ' ' + this.getClassName().nestingLevelInline;
        break;
      default:
        attrs.className += ' ' + this.getClassName().nestingLevelSmallBox;
    }

    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let modal = (
      <Modal
        className={this.getClassName().modal}
        ref_={(modal) => this.modal = modal}
        content={this.props.infoContent}
        header={this.props.infoHeader}
        parent={this}
      />
    );

    let component;
    switch (this.getNestingLevel()) {
      case 'inline':
        component = (
          <UU5.Bricks.Text {...this.getMainPropsToPass()} >
            {this.getChildren()}
            {this.getDisabledCover()}
          </UU5.Bricks.Text>
        );
        break;
      default:
        component = (
          <div>
            <div {...this._getMainAttrs()} >
              {this.getChildren()}
              {this.getDisabledCover()}
            </div>
            {modal}
          </div>
        );
    }

    return component;
  }
  //@@viewOff:render
});

var createColoredBox = (colorSchema) => {
  return (
    React.createClass({
      render() {
        return (
          <Box {...this.props} colorSchema={colorSchema}>
            {this.props.children && React.Children.toArray(this.props.children)}
          </Box>
        );
      }
    })
  )
};

Environment.colorSchema.forEach((colorSchema) => {
  var colorSchemaCapitalize = Tools.getCamelCase(colorSchema);
  Box[colorSchema] = createColoredBox(colorSchema);
  Box['bg' + colorSchemaCapitalize] = createColoredBox(colorSchema);
});

export default Box;
