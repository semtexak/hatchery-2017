import React from 'react';
//import {FloatMixin} from '../layout/layout.js';
import {BaseMixin, ElementaryMixin, ColorSchemaMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Button from './button.js';
import Glyphicon from './glyphicon.js';
import Environment from '../environment/environment.js'
import './button-to-top.less';

export const ButtonToTop = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin,
    //FloatMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ButtonToTop',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'uu5-bricks-button-to-top'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    glyphicon: React.PropTypes.string,
    offset: React.PropTypes.number,
    scrollDuration: React.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      glyphicon: 'uu-glyphicon-arrow-up',
      offset: 150,
      scrollDuration: 800
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      visible: false
    };
  },

  componentDidMount() {
    window.addEventListener('scroll', this._scroll);
  },

  componentWillUnmount() {
    window.removeEventListener('scroll', this._scroll);
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _scroll(e) {
    let offset = e.target.scrollingElement ? e.target.scrollingElement.scrollTop : e.target.documentElement.scrollTop;
    if (!this._visible) {
      if (offset >= this.props.offset) {
        this._visible = true;
        this.setState({visible: true});
      }
    } else if (offset < this.props.offset) {
      this._visible = false;
      this.setState({visible: false});
    }
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs() {
    let mainProps = this.getMainPropsToPass();
    mainProps.hidden = !this.state.visible;
    mainProps.colorSchema = this.props.colorSchema;
    mainProps.nestingLevel = this.getNestingLevel();
    return mainProps;
  },

  //@@viewOn:render
  render() {
    return (
      <Button {...this._buildMainAttrs()} onClick={() => {
        Tools.scrollToTarget(null, this.props.scrollDuration)
      }}>

        <Glyphicon glyphicon={this.props.glyphicon}/>
      </Button>
    );
  }
  //@@viewOff:render
});

export default ButtonToTop;
