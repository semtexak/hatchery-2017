import React from 'react';
import {BaseMixin, ElementaryMixin, NestingLevelMixin, ContentMixin, Tools} from '../common/common.js';
import Environment from '../environment/environment.js';

import Link from './link.js';
import TabsItem from './tabs-item';

import './tabs.less';

export const Tabs = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Tabs',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: 'uu5-bricks-tabs',
      ul: 'uu5-bricks-tabs-list nav nav-',
      pills: 'pills',
      justified: 'nav-justified',
      stacked: 'nav-stacked',
      content: 'tab-content'
    },
    defaults: {
      childTagName: 'UU5.Bricks.Tabs.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    type: React.PropTypes.oneOf(['tabs', 'pills']),
    stacked: React.PropTypes.bool,
    justified: React.PropTypes.bool,
    fade: React.PropTypes.bool,
    activeName: React.PropTypes.string,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    ),
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      type: 'tabs',
      stacked: false,
      justified: false,
      fade: false,
      activeName: null,
      allowTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeName: this.props.activeName
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({ activeName: nextProps.activeName });
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setActive(name) {
    this.setState({ activeName: name });
    return this
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    let childTagName = Tools.getChildTagName(child);
    let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_(child, childIndex){
    let newChildProps = Tools.merge({}, child.props);
    newChildProps.id = newChildProps.name || newChildProps.id || this.getId() + '-' + childIndex;

    let active = false;
    if (!this.state.activeName) {
      if (childIndex === 0) {
        active = true;
      }
    } else if (newChildProps.id === this.state.activeName) {
      active = true;
    }

    newChildProps._active = active;
    newChildProps._fade = this.props.fade;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItems() {
    let children = this.getChildren();

    let items = children.map((tab, i) => {
      if (!this.state.activeName) {
        if (i === 0) {
          return <li key={i} className="active"><Link>{tab.props.header}</Link></li>;
        }
      } else if ((tab.props.name || tab.props.id) === this.state.activeName) {
        return <li key={i} className="active"><Link>{tab.props.header}</Link></li>;
      }
      return (
        <li key={i}>
          <Link
            onClick={ () => this.setState({ activeName: tab.props.name || tab.props.id })}>
            {tab.props.header}
          </Link>
        </li>
      );
    });

    return [items, children]
  },

  _buildUlAttributes() {
    let ulClassName = this.getClassName().ul;

    if (this.props.stacked) {
      ulClassName += 'pills';
      ulClassName += ' ' + this.getClassName().stacked;
    } else {
      ulClassName += this.props.type;
    }

    this.props.justified && (ulClassName += ' ' + this.getClassName().justified);

    return ulClassName;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let items = this._getItems();
    return (
      this.getNestingLevel()
        ? (
        <div {...this.buildMainAttrs()} >
          <ul className={this._buildUlAttributes()}>
            {items[0]}
          </ul>

          <div className={this.getClassName().content}>
            {items[1]}
          </div>
        </div>
      )
        : null
    )
  }
  //@@viewOff:render
});

Tabs.Item = TabsItem;
export default Tabs;
