import React from 'react';
import {BaseMixin, ElementaryMixin, SectionMixin, CcrWriterMixin, Tools} from '../common/common.js';
import Environment from '../environment/environment.js';

import './popover.less';

export const Popover = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    SectionMixin,
    CcrWriterMixin,
    //FloatMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ContextMenu',
    classNames: {
      main: 'uu5-bricks-popover',
      open: 'uu5-bricks-popover-shown',
      content: 'uu5-bricks-popover-content',
      header: 'uu5-bricks-popover-header',
      body: 'uu5-bricks-popover-body',
      footer: 'uu5-bricks-popover-footer'
    },
    defaults: {
      transitionDuration: 100
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    shown: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      shown: false
    };
  },

  getInitialState() {
    return {
      header: null,
      content: null,
      footer: null,
      pageX: null,
      pageY: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.setState({hidden: !this.props.shown});
  },

  componentWillReceiveProps(nextProps){
    if (nextProps.controlled) {
      this.setState({hidden: !nextProps.shown});
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  open(opt, setStateCallback) {
    this._addEvent();

    let pageX = opt.pageX;
    let pageY = opt.pageY;

    if (opt.event) {
      pageX = pageX || opt.event.pageX;
      pageY = pageY || opt.event.pageY;
    }


    this.setState({
      header: opt.header || this.getHeader(),
      content: opt.content || this.getChildren(),
      footer: opt.footer || this.getFooter(),
      hidden: true,
      pageX: 0,
      pageY: 0
    }, () => {
      if (window.innerHeight < (pageY + Tools.getOuterHeight(this, true))) {
        pageY = pageY - Tools.getOuterHeight(this, true);
      }

      if (window.innerWidth < (pageX + Tools.getOuterWidth(this, true))) {
        pageX = pageX - Tools.getOuterWidth(this, true);
      }
      this.setState({
        hidden: false,
        pageX: pageX,
        pageY: pageY
      }, () => {
        typeof setStateCallback === 'function' && setStateCallback();
      });
    });
    return this;
  },

  close(setStateCallback) {
    this._removeEvent();

    this.setState({
      // header: null,
      // content: null,
      // footer: null,
      hidden: true
    }, setStateCallback);

    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },

  _addEvent(){
    Environment.EventListener.addWindowEvent('click', this.getId(), (e) => {
      let isPopover = this._findTarget(e.target);

      if (!this._stopPropagation && !isPopover && !this.isHidden()) {
        this.close();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent(){
    Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _getMainAttrs() {
    let props = this.getMainAttrs();

    !this.isHidden() && (props.className += ' ' + this.getClassName().open);

    props.style = {};
    if (this.state.pageX !== null) {
      props.style = {
        left: this.state.pageX,
        top: this.state.pageY
      };
    }

    //opera mini dont know how to use transitions :(
    if (navigator.userAgent.indexOf('Opera Mini') == -1) {
      let time = this.getDefault().transitionDuration / 1000;
      ['WebkitTransitionDuration', 'MozTransitionDuration', 'MsTransitionDuration',
        'OTransitionDuration', 'transitionDuration'].forEach((style) => {
        //props.style[style] = time + 's';
      });
    }

    return props;
  },

  _getHeader(){
    let header = this.state.header || this.getHeader();
    if (header) {
      header = <div className={this.getClassName().header}>{header}</div>;
    }
    return header;
  },

  _getFooter(){
    let footer = this.state.footer || this.getFooter();
    if (footer) {
      footer = <div className={this.getClassName().footer}>{footer}</div>;
    }
    return footer;
  },

  _getBody(){
    let children = this.buildChildren({content: this.state.content, children: this.props.children});
    if (children) {
      children = <div className={this.getClassName().body}>{children}</div>;
    }
    return children;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      <div {...this._getMainAttrs()} id={this.getId()}>
        <div className={this.getClassName().content}>
          {this._getHeader()}
          {this._getBody()}
          {this._getFooter()}
        </div>
        {this.getDisabledCover()}
      </div>
    );
  }
  //@@viewOff:render
});

export default Popover;
