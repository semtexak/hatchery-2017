import React from 'react';
import {BaseMixin, ElementaryMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';

import './number.less';

export const Number = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Number',
    nestingLevel: 'inline',
    classNames: {
      main: 'uu5-bricks-number',
      negative: 'uu5-bricks-number-negative',
      positive: 'uu5-bricks-number-positive',
      zero: 'uu5-bricks-number-zero'
    },
    defaults: {
      event: Tools.events.number,
      thousandSeparator: '&nbsp;',
      decimalSeparator: ','
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: React.PropTypes.number,
    onChange: React.PropTypes.func,
    thousandSeparator: React.PropTypes.string,
    decimalSeparator: React.PropTypes.string,
    minDecimalLength: React.PropTypes.number,
    maxDecimalLength: React.PropTypes.number,
    rounded: React.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      value: null,
      onChange: null,
      thousandSeparator: null,
      decimalSeparator: null,
      minDecimalLength: null,
      maxDecimalLength: null,
      rounded: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      country: this.props.country,
      thousandSeparator: this.props.thousandSeparator,
      decimalSeparator: this.props.decimalSeparator
    };
  },

  componentWillMount: function () {
    Environment.EventListener.registerNumber(this.getId(), this._onChange);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        thousandSeparator: nextProps.thousandSeparator,
        decimalSeparator: nextProps.decimalSeparator,
        country: nextProps.country
      });
    }
  },

  componentWillUnmount: function () {
    Environment.EventListener.unregisterNumber(this.getId(), this._onChange);
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getCountry() {
    return this.state.country;
  },

  setCountry(country, setStateCallback) {
    this.setOptions({country: country ? country.toLowerCase() : country}, setStateCallback);
    return this;
  },

  getDecimalSeparator() {
    return this.state.decimalSeparator;
  },

  setDecimalSeparator(decimalSeparator, setStateCallback) {
    this.setOptions({decimalSeparator: decimalSeparator}, setStateCallback);
    return this;
  },

  getThousandSeparator() {
    return this.state.thousandSeparator;
  },

  setThousandSeparator(thousandSeparator, setStateCallback) {
    this.setOptions({thousandSeparator: thousandSeparator}, setStateCallback);
    return this;
  },

  setOptions(opt, setStateCallback) {
    this.setState({
      country: opt.country === undefined ? this.state.country : (opt.country ? opt.country.toLowerCase() : opt.country),
      thousandSeparator: opt.thousandSeparator === undefined ? this.state.thousandSeparator : opt.thousandSeparator,
      decimalSeparator: opt.decimalSeparator === undefined ? this.state.decimalSeparator : opt.decimalSeparator
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onChange(opt) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this, opt);
    } else {
      this.setOptions(opt);
    }
    return this;
  },

  _formatNumber(){
    let number = this.props.value;

    if (number !== null) {
      let numberParts = number.toString().split('.');

      if (this.props.rounded !== null && this.props.rounded <= 0) {
        number = Tools.round10(parseFloat(number), this.props.rounded);
      } else if (numberParts.length > 1) {
        if (this.props.maxDecimalLength && this.props.maxDecimalLength < numberParts[1].length) {
          numberParts[1] = numberParts[1].slice(0, this.props.maxDecimalLength - numberParts[1].length);
        }
        number = +numberParts.join('.');
      }

      let separators = this._getSeparators(number);

      let numberPartsRounded = number.toString().split('.');
      numberPartsRounded[0] = numberPartsRounded[0].replace(/\B(?=(\d{3})+(?!\d))/g, separators.thousandSeparator);

      let result = numberPartsRounded[0];
      if (numberPartsRounded.length > 1 || this.props.minDecimalLength) {
        result += separators.decimalSeparator + Tools.ljust((numberPartsRounded[1] || 0), this.props.minDecimalLength, '0');
      }

      return result;
    }
  },

  _getSeparators(number) {
    let separators = {};
    let country = this.getCountry();

    if (country) {
      separators = this._getFormatByCountry(number, country);
    } else if (this.state.thousandSeparator === null && this.state.decimalSeparator === null) {
      separators = this._getFormatFromNumber(number);

    } else {
      separators.decimalSeparator = this.state.decimalSeparator;
      separators.thousandSeparator = this.state.thousandSeparator;
    }

    separators.decimalSeparator = separators.decimalSeparator || this.state.decimalSeparator || this.getDefault().decimalSeparator;
    separators.thousandSeparator = separators.thousandSeparator || this.state.thousandSeparator || this.getDefault().thousandSeparator;

    return separators;
  },

  _getFormatByCountry(number, country) {
    let result;
    if (Environment.numberFormat[country]) {
      result = Environment.numberFormat[country];
    } else {
      result = this._getFormatFromNumber(number, country);
    }
    return result;
  },

  _getFormatFromNumber(number, country){
    let localizedSeparators = number.toLocaleString(country);

    let matchNoNumber = localizedSeparators.toString().match(/(\D)/g);
    if (matchNoNumber && matchNoNumber[0] == '-') {
      matchNoNumber.shift();
    }

    let deciSeparator = null;
    let thouSeparator = null;
    if (matchNoNumber) {
      let count = matchNoNumber.length;
      if (count > 1) {
        deciSeparator = matchNoNumber[count - 1];
        thouSeparator = this._checkSpace(matchNoNumber[count - 2]);

      } else if (count == 1) {
        if (this.props.value < -999 || this.props.value > 999) {

          thouSeparator = this._checkSpace(matchNoNumber[count - 2]);
          deciSeparator = null;
        } else {
          thouSeparator = null;
          deciSeparator = matchNoNumber[count - 1];
        }
      } else {
        thouSeparator = null;
        deciSeparator = null;
      }
    }

    return {decimalSeparator: deciSeparator, thousandSeparator: thouSeparator}
  },

  _checkSpace(separator){
    if (separator == ' ') {
      separator = '&nbsp;';
    }
    return separator;
  },

  _getMainAttrs(){
    var mainAttrs = this.buildMainAttrs();
    let number = this.props.value;
    if (number !== null) {
      if (number < 0) {
        mainAttrs.className += ' ' + this.getClassName().negative;
      } else if (number == 0) {
        mainAttrs.className += ' ' + this.getClassName().zero;
      } else {
        mainAttrs.className += ' ' + this.getClassName().positive;
      }
    }
    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let mainAttrs = this._getMainAttrs();
    let numAttrs = {dangerouslySetInnerHTML: {__html: this._formatNumber(this.props.value)}};
    let result = <span {...mainAttrs} {...numAttrs} />;

    if (this.isDisabled()) {
      result = (
        <span {...mainAttrs}>
          <span {...numAttrs} />
          {this.getDisabledCover()}
        </span>
      );
    } else {
      result = <span {...mainAttrs} {...numAttrs} />;
    }

    return this.getNestingLevel() ? result : null;
  }
  //@@viewOff:render
});

export default Number;
