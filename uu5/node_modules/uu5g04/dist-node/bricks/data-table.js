import React from 'react';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import Tools from '../common/tools.js';
import LsiMixin from '../common/lsi-mixin.js';
import SectionMixin from '../common/section-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import Environment from './../environment/environment.js';
import Error from './error.js'
import Table from './table.js'
import THead from './table-thead.js'
import TFoot from './table-tfoot.js'
import TBody from './table-tbody.js'
import Th from './table-th.js'
import Td from './table-td.js'
import Tr from './table-tr.js'

import './data-table.less'

export const DataTable = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    LsiMixin,
    SectionMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.DataTable',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-data-table'
    },
    lsi: () => (Environment.Lsi.Bricks.dataTable),
    errors: {
      invalidDataHeader: 'Header row items count (%d) are not equal to data row (0) items length (%d).',
      invalidDataBody: 'Data row (%d) items count (%d) are not equal to data row (%d) items length (%d).',
      invalidDataFooter: 'Footer row items count (%d) are not equal to data row (%d) items length (%d).'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    striped: React.PropTypes.bool,
    bordered: React.PropTypes.bool,
    hover: React.PropTypes.bool,
    condensed: React.PropTypes.bool,
    headerRow: React.PropTypes.arrayOf(
      React.PropTypes.any //content props
    ),
    footerRow: React.PropTypes.arrayOf(
      React.PropTypes.any //content props
    ),
    rows: React.PropTypes.arrayOf(
      React.PropTypes.arrayOf(
        React.PropTypes.any //content props
      )
    )
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      striped: false,
      bordered: false,
      hover: false,
      condensed: false,
      headerRow: null,
      footerRow: null,
      rows: null
    };
  },

  getInitialState: function () {
    return {
      valid: this._validateData(this.props)
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillReceiveProps: function (nextProps) {
    if (this.props.headerRow !== nextProps.headerRow ||
      this.props.rows !== nextProps.rows ||
      this.props.footerRow !== nextProps.footerRow) {
      this.setState({valid: this._validateData(nextProps)});
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _validateData: function (props) {
    var dataTable = this;
    var valid = true;
    var referenceRow = props.headerRow;

    for (var i = 0; i < props.rows.length; i++) {
      var row = props.rows[i];

      if (referenceRow && valid) {
        valid = referenceRow.length === row.length;

        if (!valid) {
          if (i === 0) {
            dataTable.showError('invalidDataHeader', [referenceRow.length, row.length]);
          } else {
            dataTable.showError('invalidDataBody', [(i - 1), referenceRow.length, i, row.length]);
          }
          break;
        }
      } else {
        referenceRow = row;
      }
    }

    if (valid && props.footerRow && referenceRow) {
      valid = props.footerRow.length === referenceRow.length;
      if (!valid) {
        dataTable.showError('invalidDataFooter', [props.footerRow.length, referenceRow.length - 1, referenceRow.length]);
      }
    }

    return valid;
  },

  _getHeaderRow: function () {
    return (
      <THead>
      <Tr content={this.props.headerRow && this._getRowCells(this.props.headerRow, true)}/>
      </THead>
    );
  },

  _getFooterRow: function () {
    return (
      <TFoot>
      <Tr content={this.props.footerRow && this._getRowCells(this.props.footerRow)}/>
      </TFoot>
    );
  },

  _getBodyRows: function () {
    var dataTable = this;
    var rows = this.props.rows.map(function (row, i) {
      return <Tr key={i}>{dataTable._getRowCells(row)}</Tr>
    });

    return (
      <TBody>
      {rows}
      </TBody>
    );
  },

  _getRowCells: function (row, isHeader) {
    var brick = isHeader ? Th : Td;
    var dataTable = this;
    return row.map(function (cell, i) {
      var props;
      if (dataTable._isProps(cell)) {
        props = Tools.merge({}, cell, {key: i});
      } else {
        props = {content: dataTable._checkLsiContent(cell), key: i};
      }
      return React.createElement(brick, props);
    });
  },

  _isProps: function (cell) {
    return !(
      (typeof cell === 'string' || typeof  cell === 'number') ||         // number or string
      (typeof cell === 'object' && (cell.lsi || cell === null)) ||       // empty string or lsi content
      (typeof cell === 'object' && typeof cell.type === 'function')      // react.element
    );
  },

  _checkLsiContent: function (content) {
    return content.lsi ? this.getLSIItem(content.lsi) : content;
  },

  _getMainProps: function () {
    var mainProps = this.getMainPropsToPass([
      'UU5_Common_BaseMixin',
      'UU5_Common_ElementaryMixin',
      'UU5_Common_SectionMixin'
    ]);
    mainProps.striped = this.props.striped;
    mainProps.bordered = this.props.bordered;
    mainProps.hover = this.props.hover;
    mainProps.condensed = this.props.condensed;

    return mainProps;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var result;

    if (this.state.valid) {
      result = (
        <Table
          {...this._getMainProps()}
          header={this.props.header}
          footer={this.props.footer}
          nestingLevel={this.getNestingLevel()}
        >
          {this._getHeaderRow()}
          {this._getBodyRows()}
          {this._getFooterRow()}
        </Table>
      );
    } else {
      result = <Error content={this.getLSIComponent('invalidDataLabel')}/>
    }

    return result;
  }
  //@@viewOff:render
});

export default DataTable;
