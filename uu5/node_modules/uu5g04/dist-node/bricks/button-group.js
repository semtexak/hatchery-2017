import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  NestingLevelMixin,
  ColorSchemaMixin,
  ContentMixin,
  Tools
} from '../common/common.js';
import Button from './button.js';
import {Div} from './factory.js';

import './button-group.less';

export const ButtonGroup = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ColorSchemaMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ButtonGroup',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'uu5-bricks-button-group',
      horizontal: 'btn-group',
      vertical: 'btn-group-vertical',
      //displayBlock: 'btn-group-justified'
    },
    defaults: {
      childTagNames: ['UU5.Bricks.Button', 'UU5.Bricks.Dropdown', 'UU5.Bricks.ButtonSwitch']
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    size: React.PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
    vertical: React.PropTypes.bool,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    ),
    inverted: React.PropTypes.bool

    // TODO: not possible for button, but for <a> element
    //displayBlock: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      size: 'md',
      vertical: false,
      allowTags: [],
      inverted: false
      //displayBlock: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagNames);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child, i) {
    var newChildProps = child.props;
    newChildProps = Tools.mergeDeep({}, newChildProps);

    newChildProps.size = this.props.size;
    newChildProps.disabled = this.isDisabled() || newChildProps.disabled;
    this.props.inverted && (newChildProps.inverted = true);

    var childTagName = Tools.getChildTagName(child);
    if (childTagName === this.getDefault().childTagNames[1]) {
      var className = newChildProps.className ? newChildProps.className + ' ' : '';
      className += this.getClassName().horizontal;
      newChildProps.className = className;
    }

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPropsToPass: function () {
    let newProps = this.getMainPropsToPass();
    let newMainAttrs = newProps.mainAttrs;
    newMainAttrs.className += ' ' + this.getClassName(this.props.vertical ? 'vertical' : 'horizontal');
    newProps = Tools.merge(newProps,{mainAttrs:newMainAttrs});
    return newProps;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <Div {...this._getPropsToPass()}>
            {this.getChildren()}
          </Div>
        ) : null
    );
  }
  //@@viewOff:render
});

export default ButtonGroup;
