import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  ContentMixin,
  ColorSchemaMixin,
  Tools,
  NestingLevelMixin
} from '../common/common.js';
import Environment from '../environment/environment.js';
import Cover from './progress-bar-cover.js';
import Item from './progress-bar-item.js';

import './progress-bar.less';

export const ProgressBar = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    ColorSchemaMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ProgressBar',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-progress-bar'
    },
    defaults: {
      childTagName: 'UU5.Bricks.ProgressBar.Item',
      itemName: 'progressBarItem'
    },
    warnings: {
      increaseImpossible: 'Progress Bar is full. Cannot increase above %d.',
      decreaseImpossible: 'Progress Bar is empty. Cannot decrease below %d.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    progress: React.PropTypes.number,
    striped: React.PropTypes.bool,
    animated: React.PropTypes.bool,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    )
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      progress: 0,
      striped: false,
      animated: false,
      allowTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isPossibleChangeProgress: function (progress) {
    var count = 0;
    this.eachRenderedChild(function (progressBar) {
      count += progressBar.getProgress();
    });
    return count + progress >= 0 && count + progress <= 100;
  },

  isPossibleIncrease: function (increasedValue) {
    return this.isPossibleChangeProgress(increasedValue);
  },

  isPossibleDecrease: function (decreasedValue) {
    return this.isPossibleChangeProgress(-decreasedValue);
  },

  getProgress: function (name) {
    return this._getProgressBarItem(name).getProgress();
  },

  setProgress: function (params, setStateCallback) {
    typeof params === 'number' && (params = {value: params});
    return this._getProgressBarItem(params.name).setProgress(params, setStateCallback);
  },

  // value number or object {value, name,  content, striped, animated}
  increase: function (params, setStateCallback) {
    typeof params === 'number' && (params = {value: params});

    if (this.isPossibleIncrease(params.value)) {
      this._getProgressBarItem(params.name).increase(params, setStateCallback);
    } else {
      this.showWarning('increaseImpossible', params.value);
    }
    return this;
  },

  decrease: function (params, setStateCallback) {
    typeof params === 'number' && (params = {value: params});

    if (this.isPossibleDecrease(params.value)) {
      this._getProgressBarItem(params.name).decrease(params, setStateCallback);
    } else {
      this.showWarning('decreaseImpossible', params.value);
    }
    return this;
  },

  getItem: function (name) {
    return this.getRenderedChildByName(name);
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getProgressBarItem: function (name) {
    return this.getItem(name || this.getDefault().itemName);
  },

  _getMainProps: function () {
    return this.getMainPropsToPass(['UU5_Common_BaseMixin', 'UU5_Common_ElementaryMixin']);
  },

  _getChildProps: function () {
    return {
      name: this.getDefault().itemName,
      progress: this.props.progress,
      content: this.getContent(),
      striped: this.props.striped,
      animated: this.props.animated
    };
  },

  _buildChild: function () {
    var child = <Item {...this._getChildProps()} />;
    return this.cloneChild(child, this.expandChildProps(child, 0));
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <Cover {...this._getMainProps()}>
            {this.props.children ? this.getChildren() : this._buildChild()}
          </Cover>
        ) : null
    );
  }
  //@@viewOff:render
});

ProgressBar.Item = Item;

export default ProgressBar;
