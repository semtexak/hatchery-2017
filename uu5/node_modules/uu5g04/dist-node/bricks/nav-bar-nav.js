import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin, Tools} from '../common/common.js';

import './nav-bar-nav.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.NavBar.Nav',
    classNames: {
      main: 'uu5-bricks-nav-bar-nav nav navbar-nav',
      align: 'uu5-bricks-nav-bar-nav-'
    },
    defaults: {
      childTagName: 'UU5.Bricks.NavBar.Nav.Item',
      parentTagName: 'UU5.Bricks.NavBar'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    aligned: React.PropTypes.oneOf(['left', 'right']),
    smoothScroll: React.PropTypes.number,
    offset: React.PropTypes.number,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    )
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      aligned: 'left',
      smoothScroll: null,
      offset: null,
      allowTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    this.checkParentTagName(this.getDefault().parentTagName);
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isNav: function () {
    return true;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child, i) {
    var newChildProps = child.props;
    newChildProps = Tools.mergeDeep({}, newChildProps);

    newChildProps.smoothScroll = newChildProps.smoothScroll === undefined || newChildProps.smoothScroll === null ? this.props.smoothScroll : newChildProps.smoothScroll;
    newChildProps.offset = newChildProps.offset === undefined || newChildProps.offset === null ? this.props.offset : newChildProps.offset;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.buildMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().align + this.props.aligned;

    return (
      <ul {...mainAttrs}>
        {this.getChildren()}
        {this.getDisabledCover()}
      </ul>
    );
  }
  //@@viewOff:render
});