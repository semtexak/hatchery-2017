import {Tools} from '../common/common.js';
import Environment from '../environment/environment.js';

export const DraggableMixin = {

  //@@viewOn:statics
  statics: {
    UU5_Bricks_DraggableMixin: {
      requiredMixins: ['UU5_Common_BaseMixin'],
      classNames: {
        main: 'uu5-bricks-draggable'
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    // initialize
    this.registerMixin('UU5_Bricks_DraggableMixin');
    return {};
  },

  componentDidMount: function () {
    Environment.EventListener.addWindowEvent('mousemove', this.getId(), this._onMouseMove);
    Environment.EventListener.addWindowEvent('touchmove', this.getId(), this._onMouseMove);
    Environment.EventListener.addWindowEvent('mouseup', this.getId(), this._onMouseUp);
    Environment.EventListener.addWindowEvent('touchend', this.getId(), this._onMouseUp);
  },

  componentWillUnmount: function () {
    Environment.EventListener.removeWindowEvent('mousemove', this.getId(), this._onMouseMove);
    Environment.EventListener.removeWindowEvent('touchmove', this.getId(), this._onMouseMove);
    Environment.EventListener.removeWindowEvent('mouseup', this.getId(), this._onMouseUp);
    Environment.EventListener.removeWindowEvent('touchend', this.getId(), this._onMouseUp);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  hasUU5_Bricks_DraggableMixin: function () {
    return this.hasMixin('UU5_Bricks_DraggableMixin');
  },

  dragStart: function (draggedItem, x, y) {
    this.draggedItem = draggedItem;
    this.x = x;
    this.startX = this.startX || x;
    this.y = y;
    this.startY = this.startY || y;
    this.width = Tools.getWidth(this);
    this.height = Tools.getHeight(this);
    this.itemMarginTop = this.getStylePropertyValue(this.draggedItem, 'margin-top');
    this.itemMarginRight = this.getStylePropertyValue(this.draggedItem, 'margin-right');
    this.itemMarginBottom = this.getStylePropertyValue(this.draggedItem, 'margin-bottom');
    this.itemMarginLeft = this.getStylePropertyValue(this.draggedItem, 'margin-left');
    return this;
  },

  getXOffset: function () {
    return this.findDOMNode().offsetLeft;
  },

  getYOffset: function () {
    return this.findDOMNode().offsetTop;
  },

  getClientLeft: function () {
    return this.findDOMNode().clientLeft;
  },

  getClientTop: function () {
    return this.findDOMNode().clientTop;
  },

  getStylePropertyValue: function (object, property) {
    return this._getNumber(window.getComputedStyle(object.findDOMNode(), null).getPropertyValue(property));
  },

  getPaddingLeft: function () {
    return this.getStylePropertyValue(this, 'padding-left');
  },

  getPaddingTop: function () {
    return this.getStylePropertyValue(this, 'padding-top');
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getNumber: function (value) {
    return Number(value.match(/\d+/)[0]);
  },

  _onMouseMove: function (e) {
    e.preventDefault();
    if (this.draggedItem) {

      var posX = (e.pageX || (e.touches && e.touches[0].pageX));
      var posY = (e.pageY || (e.touches && e.touches[0].pageY));

      var x = posX - this.x;
      var y = posY - this.y;

      var itemDOMNode = this.draggedItem.findDOMNode();
      var itemOffsetLeft = itemDOMNode.offsetLeft;
      var itemOffsetTop = itemDOMNode.offsetTop;
      var itemOffsetWidth = itemDOMNode.offsetWidth;
      var itemOffsetHeight = itemDOMNode.offsetHeight;

      var parentX1 = this.getXOffset() + this.getClientLeft() + this.getPaddingLeft();
      var parentY1 = this.getYOffset() + this.getClientTop() + this.getPaddingTop();
      var itemX1 = itemOffsetLeft - this.itemMarginLeft;
      var itemY1 = itemOffsetTop - this.itemMarginTop;

      var parentX2 = this.width;
      var parentY2 = this.height;
      var itemX2 = itemOffsetLeft + itemOffsetWidth + this.itemMarginLeft + this.itemMarginRight;
      var itemY2 = itemOffsetTop + itemOffsetHeight + this.itemMarginTop + this.itemMarginBottom;

      if ((itemX1 + x) <= parentX1) {
        x = null;
      } else if ((itemX2 + x - parentX1 - this.itemMarginLeft) >= parentX2) {
        x = null;
      }

      if ((itemY1 + y) <= parentY1) {
        y = null;
      } else if ((itemY2 + y - parentY1 - this.itemMarginTop) >= parentY2) {
        y = null;
      }

      this.x = posX;
      this.y = posY;

      this.draggedItem.moveToPosition(x, y);
    }

    return this;
  },

  _onMouseUp: function () {
    if (this.draggedItem) {
      this.draggedItem.moveEnd();
      this.draggedItem = null;
    }
    return this;
  }
  //@@viewOff:componentSpecificHelpers
};

export default DraggableMixin;
