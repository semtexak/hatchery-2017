import React from 'react';
import {BaseMixin, ElementaryMixin, ColorSchemaMixin, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import Glyphicon from './glyphicon.js';
import Link from './link.js';

import './pagination.less';

export const Pagination = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Pagination',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: 'uu5-bricks-pagination pagination',
      item: 'uu5-bricks-pagination-item',
      link: 'uu5-bricks-pagination-link',
      nav: 'uu5-bricks-pagination-nav',
      size: 'pagination-',
      active: 'uu5-bricks-pagination-active active',
      disabledItem: 'disabled'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: React.PropTypes.array,
    activeIndex: React.PropTypes.number,
    range: React.PropTypes.number,
    prevGlyphicon: React.PropTypes.string,
    prevLabel: React.PropTypes.node,
    nextGlyphicon: React.PropTypes.string,
    nextLabel: React.PropTypes.node,
    firstGlyphicon: React.PropTypes.string,
    firstLabel: React.PropTypes.node,
    lastGlyphicon: React.PropTypes.string,
    lastLabel: React.PropTypes.node,
    size: React.PropTypes.oneOf(['sm', 'md', 'lg']),
    onChange: React.PropTypes.func,
    onChanged: React.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      items: [1, 2, 3, 4, 5],
      activeIndex: 0,
      range: 5,
      prevGlyphicon: 'uu-glyphicon-arrow-left',
      prevLabel: null,
      nextGlyphicon: 'uu-glyphicon-arrow-right',
      nextLabel: null,
      firstGlyphicon: null,
      firstLabel: null,
      lastGlyphicon: null,
      lastLabel: null,
      size: 'md',
      onChange: null,
      onChanged: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeIndex: this.props.activeIndex
    };
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },

  componentWillReceiveProps(nextProps){
    if(nextProps.controlled) {
      this.setState({activeIndex: nextProps.activeIndex});
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getItemsLength() {
    return this.props.items.length;
  },

  getActiveIndex() {
    return this.state.activeIndex;
  },

  setActiveIndex(activeIndex, setStateCallback) {
    if (activeIndex > -1 && this.getItemsLength() >= activeIndex) {
      this.setState({activeIndex: activeIndex}, setStateCallback);
    }
    return this;
  },

  increaseActiveIndex(setStateCallback) {
    var pagination = this;
    this.setState(function (state) {
      var newState = null;
      if (pagination.getItemsLength() - 1 > state.activeIndex) {
        newState = {activeIndex: state.activeIndex + 1};
      }
      return newState;
    }, setStateCallback);
    return this;
  },

  decreaseActiveIndex(setStateCallback) {
    this.setState(function (state) {
      var newState = null;
      if (0 < state.activeIndex) {
        newState = {activeIndex: state.activeIndex - 1};
      }
      return newState;
    }, setStateCallback);
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getMainAttrs() {
    var mainAttrs = this.buildMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().size + this.props.size;
    return mainAttrs;
  },

  _range(start, end, step) {
    step = step || 1;
    var rangeArray = [start];
    while (start + step <= end) {
      rangeArray.push(start += step);
    }
    return rangeArray;
  },

  _getRange() {
    var i = this.getActiveIndex();
    var start = 0;
    var end = this.getItemsLength() - 1;
    var range = this.props.range;
    var step = Math.floor(range / 2.0);

    if (i <= start + step) {
      end = range - 1 < end ? range - 1 : end;
    } else if (i >= end - step) {
      start = end - range + 1 > 0 ? end - range + 1 : start;
    } else {
      start = i - step;
      end = i + step;
    }

    return this._range(start, end);
  },

  _onChange(newActive, link, event) {
    if (typeof this.props.onChange === 'function') {
      this.props.onChange(this, newActive, event);
    } else {
      event.preventDefault();
      var onChanged;
      if (typeof this.props.onChanged === 'function') {
        var pagination = this;
        onChanged = function () {
          pagination.props.onChanged(this, this.getActiveIndex(), newActive, event);
        };
      }

      if (newActive === "prev") {
        this.decreaseActiveIndex(onChanged);
      } else if (newActive === "next") {
        this.increaseActiveIndex(onChanged);
      } else {
        this.setActiveIndex(newActive, onChanged);
      }
    }
    return this;
  },

  _getItemValue(value) {
    var newValue = null;
    var label = this.props[value + 'Label'];
    var glyphicon = this.props[value + 'Glyphicon'];

    if (label) {
      // if array of nodes -> set keys
      newValue = Array.isArray(label) ? React.Children.toArray(label) : label;
    } else if (glyphicon) {
      newValue = <Glyphicon glyphicon={glyphicon}/>
    }

    return newValue;
  },

  _createItem(i, value) {
    var liAttrs = {key: i, className: this.getClassName().item};
    var linkAttrs = {className: this.getClassName().link, parent: this};

    linkAttrs.nestingLevel = this.getNestingLevel();

    if (i === this.getActiveIndex()) {
      liAttrs.className += ' ' + this.getClassName().active;
      linkAttrs.href = '';
    } else {
      linkAttrs.onClick = this._onChange.bind(null, i);
    }

    return (
      <li {...liAttrs}>
        <Link {...linkAttrs}>
          {value}
        </Link>
      </li>
    );
  },

  _createNavItem(key, disabled, index) {
    var liAttrs = {
      key: key,
      className: this.getClassName().item + ' ' + this.getClassName().nav + ' ' + this.getClassName().nav + '-' + key
    };
    var linkAttrs = {className: this.getClassName().link, parent: this};

    linkAttrs.nestingLevel = this.getNestingLevel();

    if (disabled) {
      liAttrs.className += ' ' + this.getClassName().disabledItem;
      linkAttrs.href = '';
    } else {
      linkAttrs.onClick = this._onChange.bind(null, index === undefined ? key : index);
    }

    return (
      <li {...liAttrs}>
        <Link {...linkAttrs}>
          {this._getItemValue(key)}
        </Link>
      </li>
    );
  },

  _getItems() {
    var pagination = this;

    var range = this._getRange();

    var items = range.map(function (i) {
      return pagination._createItem(i, pagination.props.items[i]);
    });

    if (this.getItemsLength() > this.props.range) {
      var prevDisabled = this.getActiveIndex() === 0;
      var nextDisabled = this.getActiveIndex() === this.getItemsLength() - 1;

      items.unshift(this._createNavItem('prev', prevDisabled));
      items.push(this._createNavItem('next', nextDisabled));

      (this.props.firstGlyphicon || this.props.firstLabel) && items.unshift(this._createNavItem('first', prevDisabled, 0));
      (this.props.lastGlyphicon || this.props.lastLabel) && items.push(this._createNavItem('last', nextDisabled, this.getItemsLength() - 1));
    }

    return items;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    var mainAttrs = this._getMainAttrs();

    return (
      <ul {...mainAttrs}>
        {this._getItems()}
        {this.getDisabledCover()}
      </ul>
    );
  }
  //@@viewOff:render
});

export default Pagination;
