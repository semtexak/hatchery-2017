import React from 'react';
import ReactDOM from 'react-dom';
import {
  BaseMixin,
  ElementaryMixin,
  ContentMixin,
  ColorSchemaMixin,
  Tools,
  NestingLevelMixin
} from '../common/common.js';
import Environment from '../environment/environment.js';
import Button from './button.js';
import Span from './span.js';
import Glyphicon from './glyphicon.js';
import DropdownItem from './dropdown-item.js';

import './dropdown.less';

export const Dropdown = React.createClass({
  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin,
    ContentMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Dropdown',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-dropdown',
      dropdown: 'uu5-bricks-dropdown-dropdown dropdown',
      dropup: 'uu5-bricks-dropdown-dropup dropup',
      split: 'uu5-bricks-dropdown-group btn-group',
      pullRight: 'uu5-bricks-dropdown-right',
      pullRightMenu: 'dropdown-menu-right',
      dropdownBtn: 'uu5-bricks-dropdown-button dropdown-toggle',
      buttonCover: 'uu5-bricks-dropdown-button-cover',
      menu: 'uu5-bricks-dropdown-menu dropdown-menu',
      menuWrapper: 'uu5-bricks-dropdown-menu-wrapper',
      open: 'uu5-bricks-dropdown-open open',
      autoDropup: 'uu5-bricks-dropdown-dropup',
      autoDropdown: 'uu5-bricks-dropdown-dropdown',
      leave: 'uu5-bricks-dropdown-leave',
      block: 'uu5-bricks-dropdown-block'
    },
    defaults: {
      childTagName: 'UU5.Bricks.Dropdown.Item'
    },
    opt: {
      nestingLevelRoot: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: React.PropTypes.any, // content
    size: React.PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),
    onClick: React.PropTypes.func,
    inverted: React.PropTypes.bool,

    // glyphicon props
    glyphiconOpen: React.PropTypes.string,
    glyphiconClosed: React.PropTypes.string,
    glyphiconHidden: React.PropTypes.bool,

    // dropdown props
    items: React.PropTypes.arrayOf(
      React.PropTypes.object // UU5.Bricks.Dropdown.item props
    ),
    pullRight: React.PropTypes.bool,
    dropup: React.PropTypes.bool,
    split: React.PropTypes.bool,

    // link child props
    smoothScroll: React.PropTypes.number,
    offset: React.PropTypes.number,

    closedOnLeave: React.PropTypes.bool,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    ),
    disableBackdrop: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      label: 'Dropdown',
      size: 'md',
      onClick: null,
      inverted: false,
      glyphiconOpen: 'caret',
      glyphiconClosed: 'caret',
      glyphiconHidden: false,
      pullRight: false,
      dropup: false,
      split: false,
      smoothScroll: null,
      offset: null,
      closedOnLeave: false,
      allowTags: [],
      disableBackdrop: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      open: false,
      dropup: this.props.dropup,
      block: false,
      left: 0
    };
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },

  componentWillUnmount() {
    this._removeEvent();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isDropdown() {
    return true;
  },

  open: function (setStateCallback) {
    this._addEvent();
    this.setState({open: true}, setStateCallback);
    return this;
  },

  close: function (setStateCallback) {
    this._removeEvent();
    this.setState({open: false}, setStateCallback);
    return this;
  },

  toggle: function (setStateCallback) {
    this.setState(function (state) {
      state.open ? this._removeEvent() : this._addEvent();
      return {open: !state.open};
    }, setStateCallback);
    return this;
  },

  isOpen: function () {
    return this.state.open;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = Tools.getChildTagName(child);
    var childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child) {
    var newChildProps = Tools.mergeDeep({}, child.props);

    newChildProps.smoothScroll = newChildProps.smoothScroll || this.props.smoothScroll;
    newChildProps.offset = newChildProps.offset || this.props.offset;
    newChildProps.dropup = newChildProps.dropup || this.state.dropup;

    return newChildProps;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if(item.id === id) {
      result = true;
    } else if(item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },

  _addEvent(){
    !this.props.disableBackdrop && Environment.EventListener.addWindowEvent('click', this.getId(), (e) => {
      let isDropdown = this._findTarget(e.target);

      if(!this._stopPropagation && !isDropdown && this.isOpen()) {
        this.close();
      } else {
        this._stopPropagation = false;
      }
    });
    return this;
  },

  _removeEvent(){
    !this.props.disableBackdrop && Environment.EventListener.removeWindowEvent('click', this.getId());
    return this;
  },

  _toggle: function (newState, setStateCallback) {
    this.setState((state) => {
      state.open ? this._removeEvent() : this._addEvent();
      newState.open = !state.open;
      return newState;
    }, setStateCallback);
    return this;
  },

  _getGlyphicon: function () {
    var glyphicon = null;
    if (!this.props.glyphiconHidden) {
      var glyphiconName = this.isOpen() ? this.props.glyphiconOpen : this.props.glyphiconClosed;
      glyphicon = <Glyphicon glyphicon={glyphiconName}/>;
    }
    return glyphicon;
  },

  _getChildren: function () {
    var contentProps = {};

    if (this.props.items) {
      contentProps = {
        content: {
          tag: this.getDefault().childTagName,
          propsArray: this.props.items
        }
      };
    } else if (this.props.children) {
      contentProps = {children: this.props.children};
    }
    contentProps.nestingLevel = this.getNestingLevel();

    return this.buildChildren(contentProps);
  },

  _getButton: function () {
    var dropdown = this;
    var onClick = null;
    if (this.props.split) {
      if (typeof this.props.onClick === 'function') {
        onClick = function (button, event) {
          dropdown.props.onClick(dropdown, event);
        }
      }
    } else {
      onClick = this._onClickHandler
    }

    var buttonProps = {
      colorSchema: this.getColorSchema(),
      size: this.props.size,
      disabled: this.isDisabled(),
      onClick: onClick,
      inverted: this.props.inverted
    };

    var glyphicon = null;
    if (!this.props.split) {
      buttonProps.className = this.getClassName().dropdownBtn;
      glyphicon = this._getGlyphicon();
    }

    return (
      <Button {...buttonProps}>
        <Span content={this.props.label}/> {glyphicon}
      </Button>
    );
  },

  _getGlyphiconButton: function () {
    var glyphiconButton = null;

    if (this.props.split) {
      glyphiconButton = (
        <Button
          colorSchema={this.getColorSchema()}
          size={this.props.size}
          disabled={this.isDisabled()}
          className={this.getClassName().dropdownBtn}
          onClick={this._onClickHandler}

        >
          {this._getGlyphicon()}
        </Button>
      );
    }

    return glyphiconButton;
  },

  _onClickHandler: function () {
    this._stopPropagation = true;

    let dropdown = ReactDOM.findDOMNode(this);
    let dropdownMenu = ReactDOM.findDOMNode(this._dropdownMenu);
    let dropdownRect = dropdown.getBoundingClientRect();
    let dropdownMenuRect = dropdownMenu.getBoundingClientRect();

    let parent = Tools.getElementByComputedStyle(document.getElementById(this.getId()), 'overflow', 'hidden');
    let documentClientHeight = document.getElementsByTagName('html')[0].clientHeight;
    let parentHeight = parent ? Tools.getInnerHeight(parent) : documentClientHeight;


    let documentClientWidth = document.getElementsByTagName('html')[0].clientWidth;
    let parentWidth = parent ? Tools.getInnerWidth(parent) : documentClientWidth;

    let width = parentWidth < documentClientWidth ? parentWidth : documentClientWidth;
    let left = 0;
    if ((width - dropdownMenuRect.left) < dropdownMenuRect.width) {
      left = dropdownRect.width - dropdownMenuRect.width;
      if (dropdownMenuRect.left < (left * -1)) {
        left = dropdownMenuRect.left;
      }
    }
    if (this.props.pullRight) {
      left = null;
      if (dropdown.clientWidth + dropdown.offsetLeft < dropdownMenu.clientWidth) {
        left = 0;
      }
      if (width < dropdownMenu.clientWidth) {
        left = null;
      }
    }

    let fitParent = (dropdownRect.height + dropdownMenuRect.height) < parentHeight;
    let fitDown = ((dropdownRect.height + dropdownMenuRect.height) + dropdown.offsetTop - window.pageYOffset) < (parentHeight < documentClientHeight ? parentHeight : documentClientHeight);
    let fitUp = (dropdown.offsetTop - window.pageYOffset > dropdownMenuRect.height);

    if (!fitParent) {
      this._toggle({dropup: false, block: true, left: left, marginBottom: null});
    } else if ((!fitDown && fitUp) || this.state.dropup) {
      this._toggle({dropup: true, block: false, left: left, marginBottom: dropdownRect.height});
    } else if (!this.props.dropup && fitDown) {
      this._toggle({dropup: false, block: false, left: left, marginBottom: null});
    } else {
      this.toggle();
    }
    return this;
  },

  _getMainAttrs: function () {
    var mainAttrs = this.buildMainAttrs();

    mainAttrs.id = this.getId();

    if (this.isOpen()) {
      mainAttrs.className += ' ' + this.getClassName().open;
    }

    this.props.pullRight && (mainAttrs.className += ' ' + this.getClassName().pullRight);

    if (this.props.split) {
      mainAttrs.className += ' ' + this.getClassName().split;
    } else if (this.props.dropup) {
      mainAttrs.className += ' ' + this.getClassName().dropup;
    } else {
      mainAttrs.className += ' ' + this.getClassName().dropdown;
    }

    if (this.state.dropup) {
      mainAttrs.className += ' ' + this.getClassName().autoDropup;
    } else {
      mainAttrs.className += ' ' + this.getClassName().autoDropdown;
    }

    if (this.props.closedOnLeave) {
      mainAttrs.className += ' ' + this.getClassName().leave;
    }
    return mainAttrs;
  },

  _getBackdropProps: function () {
    var backdropId = this.getId() + '-backdrop';

    return {
      hidden: !this.isOpen(),
      id: backdropId,
      onClick: function (backdrop, event) {
        event.target.id === backdropId && this.close();
      }.bind(this),
      onMouseOver: this.props.closedOnLeave ? function (target, event) {
          event.target.id === backdropId && this.close();
        }.bind(this) : null
    };
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var menuClass = this.getClassName().menu;
    this.props.pullRight && (menuClass += ' ' + this.getClassName().pullRightMenu);
    this.state.block && (menuClass += ' ' + this.getClassName('block'));

    let style = {
      left: this.state.left + 'px',
      right: 'auto',
      marginBottom: this.state.marginBottom || 0
    };
    if (this.props.pullRight) {
      if (!this.state.open || this.state.left === null) {
        style = {
          right: 0,
          left: 'auto'
        };
      }
    }

    return (
      this.getNestingLevel()
        ? (
          <div {...this._getMainAttrs()}>
            <div className={this.getClassName().buttonCover} id={this.getId() + '-cover'}>
              {this._getButton()}
              {this._getGlyphiconButton()}
            </div>

            <div className={this.getClassName('menuWrapper')}>
            <ul
              className={menuClass}
              ref={dropdownMenu => this._dropdownMenu = dropdownMenu}
              style={style}
            >
              {this._getChildren()}
            </ul>
            </div>
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

Dropdown.Item = DropdownItem;
export default Dropdown;
