import React from 'react';
import {BaseMixin, ElementaryMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';

import './image.less';

export const Image = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Image',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-image',
      disabledWrapper: 'uu5-common-disabled-cover-wrapper'
    }
  },
  //@@viewOff:statics

  // TODO: strictCircle -> no ellipse but cut a circle from different image size - e.g. http://sixrevisions.com/css/circular-images-css/
  //@@viewOn:propTypes
  propTypes: {
    type: React.PropTypes.oneOf(['rounded', 'circle', 'thumbnail']),
    src: React.PropTypes.string,
    responsive: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      type: null,
      src: 'noSrc',
      responsive: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAlt: function () {
    var alt = this.getName();

    if (!alt && this.props.src) {
      alt = Tools.getFileName(this.props.src);
    }

    return alt;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.buildMainAttrs();

    this.props.type && (mainAttrs.className += ' img-' + this.props.type);
    this.props.responsive && (mainAttrs.className += ' img-responsive');
    mainAttrs.src = this.props.src;
    mainAttrs.alt = mainAttrs.alt || this._getAlt();

    var image = <img {...mainAttrs} />;

    if (this.isDisabled()) {
      image = (
        <div className={this.getClassName().disabledWrapper}>
          {image}
          {this.getDisabledCover()}
        </div>
      );
    }

    return this.getNestingLevel() ? image : null;
  }
  //@@viewOff:render
});

export default Image;
