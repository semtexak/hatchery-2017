import React from 'react';
import {BaseMixin, ElementaryMixin, ColorSchemaMixin, ContentMixin, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import Link from './link.js';

import './alert.less';

export const Alert = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ColorSchemaMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Alert',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection','box'),
    classNames: {
      main: 'uu5-bricks-alert alert',
      position: 'uu5-bricks-alert-',
      block: 'uu5-bricks-alert-block',
      close: 'uu5-bricks-alert-close close'
    },
    defaults: {
      transitionDuration: 150
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    position: React.PropTypes.oneOf([
      'left',
      'center',
      'right'
    ]),
    closeTimer: React.PropTypes.number,
    closeDisabled: React.PropTypes.bool,
    block: React.PropTypes.bool,
    onClose: React.PropTypes.func,
    onCloseAfter: React.PropTypes.func,
    onCloseBefore: React.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      position: 'center',
      closeTimer: null,
      closeDisabled: false,
      block: false,
      onClose: null,
      onCloseAfter: null,
      onCloseBefore: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillReceiveProps: function (nextProps) {
    nextProps.content !== this.props.content && this._clearTimeout();
  },

  componentWillUnmount: function () {
    this._clearTimeout();
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _clearTimeout: function () {
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    }
    return this;
  },

  _hide: function () {
    var alert = this;
    this._clearTimeout();

    if (typeof this.props.onCloseBefore === 'function') {
      this.props.onCloseBefore(alert, this._hideFunc())
    } else {
      this._hideFunc();
    }

    return this;
  },

  _hideFunc: function () {
    var alert = this;
    this.hide(
      (typeof this.props.onClose === 'function' || typeof this.props.onCloseAfter === 'function') && function () {
        setTimeout(function () {
          (typeof alert.props.onCloseAfter === 'function') ?
            alert.props.onCloseAfter(alert) :
            alert.props.onClose(alert);
        }, this.getDefault().transitionDuration);
      });
  },

  //@@viewOff:componentSpecificHelpers

  // Render
  _getMainAttrs: function () {
    var mainAttrs = this.buildMainAttrs();
    mainAttrs.className += ' ' + this.getClassName().position + this.props.position;
    this.props.block && (mainAttrs.className += ' ' + this.getClassName().block);

    mainAttrs.style = mainAttrs.style || {};

    var time = this.getDefault().transitionDuration / 1000;
    ['WebkitTransitionDuration', 'MozTransitionDuration', 'MsTransitionDuration',
      'OTransitionDuration', 'transitionDuration'].forEach(function (style) {
      mainAttrs.style[style] = time + 's';
    });

    return mainAttrs;
  },

  _manageTimeout: function () {
    if (this.props.closeTimer) {
      if (this.isHidden()) {
        this._clearTimeout();
      } else if (!this.timeout) {
        this.timeout = setTimeout(this._hide, this.props.closeTimer);
      }
    }
  },

  //@@viewOn:render
  render: function () {
    var mainAttrs = this._getMainAttrs();
    this._manageTimeout();

    return (
      this.getNestingLevel()
        ? (
          <div {...mainAttrs}>
            {!this.props.closeDisabled &&
            <Link className={this.getClassName().close} onClick={this._hide} content='&times;' parent={this}/>}
            {this.getChildren()}
            {this.getDisabledCover()}
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

export default Alert;
