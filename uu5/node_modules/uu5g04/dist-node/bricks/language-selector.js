import React from 'react';
import Environment from '../environment/environment.js';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import ScreenSizeMixin from '../common/screen-size-mixin.js';
import LsiMixin from '../common/lsi-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import Dropdown from './dropdown.js';
import DropdownItem from './dropdown-item.js';

import {Span, Button, Modal, Text} from './bricks.js';

import './language-selector.less';

export const LanguageSelector = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ScreenSizeMixin,
    LsiMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.LanguageSelector',
    nestingLevelList: Environment.getNestingLevelList('box', 'inline'),
    classNames: {
      main: 'uu5-bricks-language-selector',
      left: 'uu5-bricks-language-selector-left',
      flag: 'uu5-bricks-language-selector-flag',
      text: 'uu5-bricks-language-selector-text',
      label: 'uu5-bricks-language-selector-label',
      code: 'uu5-bricks-language-selector-code',
      codeText: 'uu5-bricks-language-selector-code-text',
      modalButton: 'uu5-bricks-language-selector-modalButton',
      button: 'uu5-bricks-language-selector-button',
      spaceBetween: 'uu5-bricks-language-selector-space-between'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    headerMode: React.PropTypes.oneOf(['all', 'flag', 'label', 'code']),
    bodyMode: React.PropTypes.oneOf(['all', 'flag', 'label', 'label-code']),
    displayedLanguages: React.PropTypes.oneOfType([
      React.PropTypes.arrayOf(
        React.PropTypes.string
      ),
      React.PropTypes.string,
    ]),
    languages: React.PropTypes.shape({
      languageCode: React.PropTypes.shape({
        flag: React.PropTypes.string,
        language: React.PropTypes.string
      })
    }),
    size: React.PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      languages: null,
      headerMode: 'all',
      bodyMode: 'all',
      displayedLanguages: null,
      size: 'md',
    };
  },
  // @@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      languages: this._getFilteredLanguages(this.props)
    };
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      let newLanguage = this.state.language;
      let languages = (typeof nextProps.displayedLanguages === "string") ? nextProps.displayedLanguages.replace(/ /g, '').split(',') : nextProps.displayedLanguages;
      if (languages && languages.indexOf(this.state.language) === -1) {
        newLanguage = languages[0];
      }
      this.setState({
        language: newLanguage,
        languages: this._getFilteredLanguages(nextProps)
      })
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  onChangeLanguage_(language){
    if (this.state.languages[language]) {
      this.setState({ language: language });
    }
    return this;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getFilteredLanguages(props){
    let languages = props.languages || Environment.languageList;
    let result;
    if (props.displayedLanguages) {
      let displayedLanguages = typeof props.displayedLanguages === 'string' ?
        props.displayedLanguages.replace(/ /g, '').split(',') : props.displayedLanguages;

      result = result || {};
      Object.keys(languages).forEach((key, i) => {
        if (displayedLanguages.indexOf(key) > -1) {

          result[key] = languages[key];
        }
      })
    }
    return result || languages;
  },

  _getFlag(language) {
    return <img src={this.state.languages[language].flag} className={this.getClassName().flag} />;
  },

  _getLabel(languageDescription) {
    return (
      <Span>
        <Text content={languageDescription} className={this.getClassName().label} />
      </Span>
    );
  },

  _getCode(languageCode) {
    return (
      <Span>
        <Text content={languageCode} className={this.getClassName('codeText')} />
      </Span>
    );
  },

  _getLabelCode(languageCode, languageDescription) {
    return (
      <Span>
        <Text content={languageDescription} className={this.getClassName('label')} />
        <Text content={languageCode} className={this.getClassName('codeText')} />
      </Span>
    );
  },

  _getItemContent(language, languageDescription) {
    return (
      <Span>
        {this._getFlag(language)}
        <Span content={languageDescription} className={this.getClassName().text} />
      </Span>
    );
  },

  _getItems() {
    let this_ = this;
    let items = [];
    let className;
    if(this.props.bodyMode === 'all') className = this.getClassName('left');
    else if(this.props.bodyMode === 'label-code') className = this.getClassName('code');

    Object.keys(this.state.languages).forEach((key, i) => {
      if (key != this_.state.language) {
        items.push(
          <DropdownItem label={this_._getModalItem(key)}
                        key={i}
                        className={className}
                        onClick={() => {
                          this_._setGlobalLanguage(key)
                        }}
          />
        );
      }
    });
    return items;
  },

  _openModal() {
    this.modal.open({ content: this._getModalContent(this.state.language) });
    return this;
  },

  _setGlobalLanguage(language) {
    Environment.setLanguage(language);
    this.modal && this.modal.close();
  },

  _getModalContent(language) {
    var content = [];
    var this_ = this;
    let className = this.getClassName().modalButton;
    if(this.props.bodyMode === 'all' || this.props.bodyMode === 'label-code') {
      className += ' ' + this.getClassName().spaceBetween;
    }
    Object.keys(this.state.languages).forEach((key, i) => {
      content.push(
        <Button content={
          this_._getModalItem(key)
        }
                key={i}
                onClick={() => {
                  this_._setGlobalLanguage(key)
                }}
                className={className}
                selected={this_.state.language === key}
                displayBlock

        />
      );
    });
    return content;

  },

  _getModalItem(key){
    var item;
    switch (this.props.bodyMode) {
      case('all'):
        item = this._getItemContent(key, this.state.languages[key].language);
        break;
      case('flag'):
        item = this._getFlag(key);
        break;
      case('label'):
        item = this._getLabel(this.state.languages[key].language);
        break;
      case('code'):
        item = this._getCode(key);
      case('label-code'):
        item = this._getLabelCode(key, this.state.languages[key].language);
        break;
    }
    return item;
  },

  _getContent(mode) {
    var content;
    switch (mode) {
      case('all'):
        content = this._getItemContent(this.state.language, this.state.languages[this.state.language].language);
        break;
      case('flag'):
        content = this._getFlag(this.state.language);
        break;
      case('label'):
        content = this._getLabel(this.state.languages[this.state.language].language);
        break;
      case('code'):
        content = this._getCode(this.state.language);
        break;
      case('label-code'):
        item = this._getLabelCode(this.state.language, this.state.languages[this.state.language].language);
        break;
      default:
        break;
    }
    return content;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    var result;
    if (this.isXs()) {
      result = (
        <span {...this.getMainAttrs()}>
          <Button
            className={this.getClassName().button}
            content={this._getContent(this.props.headerMode)}
            disabled={this.isDisabled()}
            hidden={this.isHidden()}
            onClick={this._openModal}
            size={this.props.size} />
          <Modal header='&nbsp;' ref_={(modal) => this.modal = modal} />
        </span>
      );
    } else {
      result = (
        <Dropdown {...this.getMainPropsToPass()} label={this._getContent(this.props.headerMode)} size={this.props.size}>
          {this._getItems()}
          {this.getDisabledCover()}
        </Dropdown>      );
    }
    return this.getNestingLevel() ? result : null
  }
  //@@viewOff:render
});

export default LanguageSelector;
