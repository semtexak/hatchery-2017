import React from 'react';

import Environment from '../environment/environment.js';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import LsiMixin from '../common/lsi-mixin.js';
import ContentMixin from '../common/content-mixin.js';
import Tools from '../common/tools.js';

import LsiItem from './lsi-item.js';

import './lsi.less';

export const Lsi = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    LsiMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Lsi',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: 'uu5-bricks-lsi'
    },
    defaults: {
      childTagName: 'UU5.Bricks.Lsi.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    lsi: React.PropTypes.object,
    allowTags: React.PropTypes.arrayOf(
      React.PropTypes.string
    ),
    params: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.array
    ])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      lsi: null,
      allowTags: [],
      params: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    let childTagName = Tools.getChildTagName(child);
    let childTagNames = this.props.allowTags.concat(this.getDefault().childTagName);
    return childTagNames.indexOf(childTagName) > -1;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _expandChildProps: function (child) {
    let newChildProps = child ? Tools.mergeDeep({}, child.props) : {};

    newChildProps.id = this.getId() + '-inner';
    newChildProps.controlled = true;
    newChildProps.hidden = this.isHidden();
    newChildProps.disabled = this.isDisabled();
    newChildProps.selected = this.isSelected();
    newChildProps.nestingLevel = this.getNestingLevel();

    return newChildProps;
  },

  _getChildren() {
    let child;
    let children = this.getChildren();

    if (children) {
      let lsi = {};
      children.forEach(child => {
        if (child.props.language) {
          lsi[child.props.language] = child;
        }
      });
      child = this.getLSIItem(lsi, this.props.params);
      child = child ? React.cloneElement(child, this._expandChildProps(child)) : null;
    } else {
      child = (
        <LsiItem
          {...this.getMainPropsToPass(['UU5_Common_BaseMixin', 'UU5_Common_ElementaryMixin'])}
          controlled
          language={this.getLanguage()}
          content={this.getLSIItem(this.props.lsi, this.props.params)}
          nestingLevel={this.getNestingLevel()}
        />
      );
    }

    return child;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? this._getChildren() : null;
  }
  //@@viewOff:render
});

Lsi.Item = LsiItem;

export default Lsi;
