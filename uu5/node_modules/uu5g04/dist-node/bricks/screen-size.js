import React from 'react';

import Environment from '../environment/environment.js';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import ScreenSizeMixin from '../common/screen-size-mixin.js';
import ContentMixin from '../common/content-mixin.js';
import Tools from '../common/tools.js';

import ScreenSizeItem from './screen-size-item.js';

import './screen-size.less';

export const ScreenSize = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    ScreenSizeMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ScreenSize',
    nestingLevelList: Environment.getNestingLevelList('spa'),
    classNames: {
      main: 'uu5-bricks-screen-size'
    },
    defaults: {
      childTagName: 'UU5.Bricks.ScreenSize.Item'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    screenSize: React.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      screenSize: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _expandChildProps: function (child) {
    let newChildProps = Tools.mergeDeep({}, child.props);

    newChildProps.id = this.getId() + '-inner';
    newChildProps.controlled = true;
    newChildProps.hidden = this.isHidden();
    newChildProps.disabled = this.isDisabled();
    newChildProps.selected = this.isSelected();
    newChildProps.nestingLevel = this.getNestingLevel();

    return newChildProps;
  },

  _testScreenSize(child, screenSize) {
    let result = child && child.props && child.props.screenSize;
    if (result) {
      if (Array.isArray(result)){
        result = result.indexOf(screenSize) > -1
      } else {
        result = (result === '*') ? true : (result === screenSize)
      }
    }
    return result;
  },

  _getItem() {
    let item = null;
    let children = this.getChildren();
    let screenSize = this.getScreenSize();

    if (children) {
      children.some(child => {
        return item = this._testScreenSize(child, screenSize) ? child : null;
      });
      item = React.cloneElement(item, this._expandChildProps(item));
    }

    return item;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return this.getNestingLevel() ? this._getItem() : null;
  }
  //@@viewOff:render
});

ScreenSize.Item = ScreenSizeItem;

export default ScreenSize;
