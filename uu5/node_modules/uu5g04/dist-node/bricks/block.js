import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  ColorSchemaMixin,
  NestingLevelMixin,
  ContentMixin,
  Tools
} from '../common/common.js';
import Environment from '../environment/environment.js';

import './block.less';

export const Block = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ColorSchemaMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Block',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-block',
      bg: 'uu5-bricks-block-bg'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    background: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      background: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _buildMainAttrs: function () {
    var mainAttrs = this.buildMainAttrs();
    this.props.background && (mainAttrs.className += ' ' + this.getClassName().bg);
    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <div {...this._buildMainAttrs()}>
            {this.getChildren()}
            {this.getDisabledCover()}
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

var createColoredBlock = function (colorSchema, background) {
  return (
    React.createClass({
      render: function () {
        return (
          <Block {...this.props} colorSchema={colorSchema} background={background}>
            {this.props.children && React.Children.toArray(this.props.children)}
          </Block>
        );
      }
    })
  )
};

Environment.colorSchema.forEach(function (colorSchema) {
  var colorSchemaCapitalize = Tools.getCamelCase(colorSchema);
  Block[colorSchema] = createColoredBlock(colorSchema);
  Block['bg' + colorSchemaCapitalize] = createColoredBlock(colorSchema, true);
});

export default Block;
