import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin} from '../common/common.js';
import Link from './link.js';

import './nav-bar-nav-item.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.NavBar.Nav.Item',
    classNames: {
      main: 'uu5-bricks-nav-bar-nav-item'
    },
    defaults: {
      parentTagName: 'UU5.Bricks.NavBar.Nav'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    href: React.PropTypes.string,
    onClick: React.PropTypes.func,
    smoothScroll: React.PropTypes.number,
    offset: React.PropTypes.number,
    target: React.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      href: '#',
      onClick: null,
      smoothScroll: null,
      offset: null,
      target: '_self'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    this.checkParentTagName(this.getDefault().parentTagName);
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHandler: function () {
    var navBar = this.getParent().getParent();
    navBar.close();
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainAttrs = this.buildMainAttrs();
    mainAttrs.onClick = this._onClickHandler;

    var children = this.getChildren();
    var firstChild = children instanceof Array ? children[0] : children;
    var child;

    if (firstChild.type && firstChild.type.tagName === 'UU5.Bricks.Dropdown') {
      child = children;
      mainAttrs.onClick = null;
    } else {
      child = (
        <Link
          href={this.props.href}
          onClick={this.props.onClick}
          smoothScroll={this.props.smoothScroll}
          offset={this.props.offset}
          target={this.props.target}
          parent={this}
        >
          {children}
        </Link>
      );
    }

    return (
      <li {...mainAttrs}>
        {child}
        {this.getDisabledCover()}
      </li>
    );
  }
  //@@viewOff:render
});