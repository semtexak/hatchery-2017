import React from 'react';
import {BaseMixin, ElementaryMixin, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';

import './video.less';

export const Video = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Video',
    nestingLevelList: Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: 'uu5-bricks-video'
    },
    errors: {
      typeNotFound: 'You have to set the type of the video or src has to contain the file extension.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    autoPlay: React.PropTypes.bool,
    disableControls: React.PropTypes.bool,
    loop: React.PropTypes.bool,
    poster: React.PropTypes.string,
    preload: React.PropTypes.oneOf(['auto', 'metadata', 'none']),
    src: React.PropTypes.string.isRequired,
    muted: React.PropTypes.bool,
    type: React.PropTypes.oneOf(['mp4', 'webm', 'ogg'])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      autoPlay: false,
      disableControls: false,
      loop: false,
      poster: '',
      preload: 'auto',
      src: '',
      muted: false,
      type: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      muted: this.props.muted
    };
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.controlled) {
      this.setState({muted: nextProps.muted});
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  toggleMuted: function () {
    this.setState((state) => ({muted: !state.muted}));
    return this
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getType: function () {
    let type;
    if (this.props.type) {
      type = this.props.type;
    } else {
      let match = /\.([a-zA-Z0-9]+)$/.exec(this.props.src);
      if (match) {
        type = match[1]
      } else {
        this.showError('typeNotFound');
      }
    }
    return type
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs: function () {
    let mainProps = this.buildMainAttrs();

    if (this.props.autoPlay) mainProps.autoPlay = true;
    if (this.state.muted) mainProps.muted = true;
    this.props.disableControls ? mainProps.controls = false : mainProps.controls = true;
    if (this.props.loop) mainProps.loop = true;
    if (this.props.poster !== '') mainProps.poster = this.props.poster;
    if (this.props.preload !== 'auto') mainProps.preload = this.props.preload;
    mainProps.type = this._getType();
    return mainProps;
  },

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <video {...this._buildMainAttrs()}>
            <source src={this.props.src}/>
          </video>
        ) : null
    );
  }
  //@@viewOff:render
});

export default Video;
