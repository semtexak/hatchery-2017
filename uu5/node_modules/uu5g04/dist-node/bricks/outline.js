import React from 'react';
import {BaseMixin, ElementaryMixin, Tools} from '../common/common.js';
import Glyphicon from './glyphicon.js';
import Link from './link.js';
import Span from './span.js';
import Tree from './tree.js';
import Modal from './outline-modal.js';

import './pagination.less';

export const Outline =  React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Outline',
    classNames: {
      main: 'uu5-bricks-outline'
    },
    defaults: {
      propsGlyphicon: 'glyphicon-info-sign'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    element: React.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      element: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _openModal: function (tag, props) {
    var propsString = JSON.stringify(props, null, 2);
    this.modal.open(tag, propsString);
    return this;
  },

  _buildOutlineItem: function (tag, props, isContent) {
    var newProps = {};
    var items = null;

    if (props) {
      for (var prop in props) {
        var value = props[prop];
        if (prop === 'parent' && value) {
          value = value.getTagName();
        } else if (typeof value === 'function') {
          value = 'function()';
        }
        newProps[prop] = value;
      }

      if (isContent && typeof props.children !== 'string') {
        items = this._buildOutlineItems(props.children);
        delete newProps.children;
      }
    }

    var link = null;
    if (Object.keys(newProps).length) {
      link = (
        <Link onClick={this._openModal.bind(this, tag, newProps)}>
          <Glyphicon glyphicon={this.getDefault().propsGlyphicon} />
        </Link>
      );
    }

    var newItemProps = {
      label: (
        <Span parent={this}>
          {tag} {link}
        </Span>
      )
    };

    items && (newItemProps.items = items);

    return newItemProps;
  },

  _buildOutlineItems: function (children) {
    var content = this;
    var items = null;

    if (children) {
      !Array.isArray(children) && (children = [children]);

      children.forEach(function (child) {
        items = items || [];
        items.push(content._buildOutlineItem(Tools.getChildTagName(child), child.props, !!child.type['UU5_Common_ContentMixin']));
      });
    }

    return items;
  },

  _refModal: function (modal) {
    this.modal = modal;
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var children = this.props.element.getStandardChildren();
    var item = this._buildOutlineItem(this.props.element.getTagName(), Tools.merge({}, this.props.element.props, { children: children }), true);

    return (
      <div {...this.buildMainAttrs()}>
        <Tree items={[item]} />
        <Modal ref={this._refModal} />
        {this.getDisabledCover()}
      </div>
    );
  }
  //@@viewOff:render
});

export default Outline;
