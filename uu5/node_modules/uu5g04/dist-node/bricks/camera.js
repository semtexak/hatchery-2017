import React from 'react';
import {BaseMixin, ElementaryMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import './camera.less';

// TODO
// quality of picture -> jpg, png, ...
// choice of camera devices if pc has more cameras
export const Camera = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Camera',
    nestingLevelList: Environment.getNestingLevelList('bigBox', 'box'),
    classNames: {
      main: 'uu5-bricks-camera',
      video: 'uu5-bricks-camera-video',
      canvas: 'uu5-bricks-camera-canvas'
    },
    errors: {
      videoError: 'Video can not be loaded.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount: function () {
    navigator.getUserMedia = navigator.getUserMedia
      || navigator.webkitGetUserMedia
      || navigator.mozGetUserMedia
      || navigator.msGetUserMedia
      || navigator.oGetUserMedia;

    if (navigator.getUserMedia) {
      navigator.getUserMedia({video: true}, this._handleVideo, this._videoError);
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getScreenShot: function () {
    var img = null;

    if (this.localMediaStream) {
      var canvas = this.canvas;
      canvas.width = Tools.getWidth(this);
      canvas.height = Tools.getHeight(this);

      var ctx = canvas.getContext('2d');
      ctx.drawImage(this.video, 0, 0, Tools.getWidth(this), Tools.getHeight(this));
      img = canvas.toDataURL('image/png');
    }

    return img;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _handleVideo: function (stream) {
    var video = this.video;
    video.src = window.URL.createObjectURL(stream);
    this.localMediaStream = stream;
    return this;
  },

  _videoError: function (e) {
    this.showError('videoError', null, {context: {event: e, src: this.video.src}});
    return this;
  },

  _refVideo: function (video) {
    this.video = video;
    return this;
  },

  _refCanvas: function (canvas) {
    this.canvas = canvas;
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <div {...this.getMainAttrs()}>
            <video autoPlay="true" ref={this._refVideo} className={this.getClassName().video}/>
            <canvas ref={this._refCanvas} className={this.getClassName().canvas}/>
            {this.getDisabledCover()}
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

export default Camera;
