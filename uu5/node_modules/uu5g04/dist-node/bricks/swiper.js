import React from 'react';
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import Tools from '../common/tools.js';
import ContentMixin from '../common/content-mixin.js';
import SwipeMixin from '../common/swipe-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import Environment from '../environment/environment.js';
import SwiperBody from './swiper-body.js';
import SwiperMenu from './swiper-menu.js';

import './swiper.less';

export const Swiper = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    SwipeMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Swiper',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-swiper'
    },
    defaults: {
      bodyTagName: 'UU5.Bricks.Swiper.Body',
      menuTagName: 'UU5.Bricks.Swiper.Menu'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    leftMenuOpen: React.PropTypes.bool,
    rightMenuOpen: React.PropTypes.bool,
    onSwipeOpenLeftMenu: React.PropTypes.func,
    onSwipeCloseLeftMenu: React.PropTypes.func,
    onSwipeOpenRightMenu: React.PropTypes.func,
    onSwipeCloseRightMenu: React.PropTypes.func,
    allowBodyTags: React.PropTypes.array,
    allowMenuTags: React.PropTypes.array
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      leftMenuOpen: false,
      rightMenuOpen: false,
      onSwipeOpenLeftMenu: null,
      onSwipeCloseLeftMenu: null,
      onSwipeOpenRightMenu: null,
      onSwipeCloseRightMenu: null,
      allowBodyTags: [],
      allowMenuTags: []
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      leftMenuOpen: this.props.leftMenuOpen,
      rightMenuOpen: this.props.rightMenuOpen
    };
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },

  componentWillReceiveProps(nextProps){
    if(nextProps.controlled){
      this.setState({
        leftMenuOpen: nextProps.leftMenuOpen,
        rightMenuOpen: nextProps.rightMenuOpen
      })
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  openLeftMenu: function (setStateCallback) {
    this.setState({
      leftMenuOpen: true,
      rightMenuOpen: false
    }, setStateCallback);
    return this;
  },

  closeLeftMenu: function (setStateCallback) {
    this.setState({
      leftMenuOpen: false
    }, setStateCallback);
    return this;
  },

  toggleLeftMenu: function (setStateCallback) {
    this.setState(function (state) {
      var newState = {leftMenuOpen: !state.leftMenuOpen};
      !state.leftMenuOpen && (newState.rightMenuOpen = false);
      return newState;
    }, setStateCallback);
    return this;
  },

  openRightMenu: function (setStateCallback) {
    this.setState({
        leftMenuOpen: false,
        rightMenuOpen: true
      },
      setStateCallback
    );
    return this;
  },

  closeRightMenu: function (setStateCallback) {
    this.setState({
        rightMenuOpen: false
      },
      setStateCallback
    );
    return this;
  },

  toggleRightMenu: function (setStateCallback) {
    this.setState(function (state) {
      var newState = {rightMenuOpen: !state.rightMenuOpen};
      !state.rightMenuOpen && (newState.leftMenuOpen = false);
      return newState;
    }, setStateCallback);
    return this;
  },

  isLeftMenuOpen: function () {
    return this.state.leftMenuOpen;
  },

  isRightMenuOpen: function () {
    return this.state.rightMenuOpen;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  shouldChildRender_: function (child) {
    var childTagName = Tools.getChildTagName(child);
    return this._getAllowMenuTags().indexOf(childTagName) > -1 || this._getAllowBodyTags().indexOf(childTagName) > -1;
  },

  expandChildProps_: function (child) {
    var newChildProps = Tools.mergeDeep({}, child.props);
    if (this._getAllowMenuTags().indexOf(Tools.getChildTagName(child)) > -1) {
      if (child.props.pullRight) {
        newChildProps._open = this.isRightMenuOpen();
      } else {
        newChildProps._open = this.isLeftMenuOpen();
      }
    }
    return newChildProps || child.props;
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAllowBodyTags() {
    return this.props.allowBodyTags.concat(this.getDefault().bodyTagName);
  },

  _getAllowMenuTags() {
    return this.props.allowMenuTags.concat(this.getDefault().menuTagName);
  },

  _onSwipeEnd: function () {
    if (this.isSwipedRight()) {
      if (this.isRightMenuOpen()) {
        if (typeof this.props.onSwipeCloseRightMenu === 'function') {
          this.props.onSwipeCloseRightMenu(this);
        } else {
          this.closeRightMenu();
        }
      } else {
        if (typeof this.props.onSwipeOpenLeftMenu === 'function') {
          this.props.onSwipeOpenLeftMenu(this);
        } else {
          this.openLeftMenu();
        }
      }
    } else if (this.isSwipedLeft()) {
      if (this.isLeftMenuOpen()) {
        if (typeof this.props.onSwipeCloseLeftMenu === 'function') {
          this.props.onSwipeCloseLeftMenu(this);
        } else {
          this.closeLeftMenu();
        }
      } else {
        if (typeof this.props.onSwipeOpenRightMenu === 'function') {
          this.props.onSwipeOpenRightMenu(this);
        } else {
          this.openRightMenu();
        }
      }
    }
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildChildren: function () {
    var menuLeft;
    var menuRight;
    var body;

    var children = this.getChildren();
    if (children) {
      children.forEach(function (child) {
        if (this._getAllowBodyTags().indexOf(Tools.getChildTagName(child)) > -1) {
          body = child;
        } else if (this._getAllowMenuTags().indexOf(Tools.getChildTagName(child)) > -1) {
          if (child.props.pullRight) {
            menuRight = menuRight || child;
          } else {
            menuLeft = menuLeft || child;
          }
        }
      }.bind(this));
    }

    var newChildren = [];
    menuLeft && newChildren.push(menuLeft);
    menuRight && newChildren.push(menuRight);
    body && newChildren.push(body);
    return newChildren;
  },

  //@@viewOn:render
  render: function () {
    return (
      this.getNestingLevel()
        ? (
          <div
            {...this.buildMainAttrs()}
            onTouchStart={this.swipeOnTouchStart}
            onTouchMove={this.swipeOnTouchMove}
            onTouchEnd={this.swipeOnTouchEnd.bind(this, this._onSwipeEnd)}
          >

            {this._buildChildren()}
            {this.getDisabledCover()}
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

Swiper.Menu = SwiperMenu;
Swiper.Body = SwiperBody;

export default Swiper;
