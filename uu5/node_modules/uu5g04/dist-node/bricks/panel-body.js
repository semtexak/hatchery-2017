import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin, Tools} from '../common/common.js';

import './panel-body.less';

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Panel.Body',
    classNames: {
      main: 'uu5-bricks-panel-body',
      body: 'uu5-bricks-panel-body-body panel-body',
      block: 'uu5-bricks-panel-body-block',
      expanding: 'uu5-bricks-panel-body-expanding'
    },
    defaults: {
      parentTagName: 'UU5.Bricks.Panel',
      duration: 250
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    _expanded: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      _expanded: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      height: this._getHeight(this.props)
    };
  },

  componentWillMount: function () {
    this.checkParentTagName(this.getDefault().parentTagName);
  },

  componentWillReceiveProps: function (nextProps) {
    var body = this;
    var height = this._getHeight(nextProps);

    if (height) {
      this.setState({height: height}, function () {
        body.timer && clearTimeout(body.timer);
        body.timer = setTimeout(
          function () {
            body.setAsyncState({height: null});
          },
          body.getDefault().duration
        )
      });
    } else {
      this.setState({height: this._getHeight(this.props)}, function () {
        body.timer && clearTimeout(body.timer);
        body.timer = setTimeout(
          function () {
            body.setAsyncState({height: height});
          },
          1
        );
      });
    }
  },

  componentWillUnmount: function () {
    this.timer && clearTimeout(this.timer);
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPanelBodyId: function () {
    return this.getId() + '-content';
  },

  _getHeight: function (props) {
    let result;
    if(props._expanded) {
      let element = document.getElementById(this._getPanelBodyId());
      element && (result = Tools.getOuterHeight(element, true));
    } else {
      result = 0;
    }
    return result;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _getMainAttrs: function () {
    var mainAttrs = this.buildMainAttrs();

    if (this.state.height === null) {
      mainAttrs.className += ' ' + this.getClassName().block;
    } else {
      this.state.height > 0 && (mainAttrs.className += ' ' + this.getClassName().expanding);

      mainAttrs.style = mainAttrs.style || {};
      mainAttrs.style.height = this.state.height + 'px';

      var time = this.getDefault().duration / 1000;
      ['WebkitTransitionDuration', 'MozTransitionDuration', 'MsTransitionDuration',
        'OTransitionDuration', 'transitionDuration'].forEach(function (style) {
        mainAttrs.style[style] = time + 's';
      });
    }

    return mainAttrs;
  },

  _buildChildren: function () {
    return this.buildChildren();
  },

  //@@viewOn:render
  render: function () {
    return (
      <div {...this._getMainAttrs()}>
        <div className={this.getClassName().body} id={this._getPanelBodyId()}
             ref={(panelBody)=>this._panelBody = panelBody}>
          {this._buildChildren()}
        </div>
        {this.getDisabledCover()}
      </div>
    );
  }
  //@@viewOff:render
});
