import React from 'react';
import {BaseMixin, ElementaryMixin, NestingLevelMixin, ColorSchemaMixin, ContentMixin} from '../common/common.js';
import Environment from '../environment/environment.js';

import './button.less';

export const Button = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ColorSchemaMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Button',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'uu5-bricks-button-main btn',
      button: 'uu5-bricks-button',
      inverted: 'uu5-bricks-button-inverted'
    },
    defaults: {
      content: 'Button'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    type: React.PropTypes.oneOf(['button', 'submit', 'reset', 'link']),
    size: React.PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),
    displayBlock: React.PropTypes.bool,
    pressed: React.PropTypes.bool,
    inverted: React.PropTypes.bool,
    // tooltipPosition: React.PropTypes.oneOf([
    //   'top', 'bottom', 'left', 'right',
    //   'auto top', 'auto bottom', 'auto left', 'auto right'
    // ]),
    onClick: React.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      type: 'button',
      size: 'md',
      displayBlock: false,
      pressed: false,
      inverted: false,
      onClick: null,
      // tooltipPosition: 'auto top'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      pressed: this.props.pressed
    };
  },

  componentDidMount() {
    // this.props.tooltip && $(this.findDOMNode()).tooltip();
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({pressed: nextProps.pressed});
    }
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setActive(pressed, setStateCallback) {
    this.setState({ pressed: pressed }, setStateCallback);
    return this;
  },

  press(setStateCallback) {
    return this.setActive(true, setStateCallback);
  },

  pressUp(setStateCallback) {
    return this.setActive(false, setStateCallback);
  },

  togglePressed(setStateCallback) {
    this.setState(function (state) {
      return {pressed: !state.pressed}
    }, setStateCallback);
    return this;
  },

  isPressed() {
    return this.state.pressed;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onClickHandler(event) {
    this.props.onClick && this.props.onClick(this, event);
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  // Render
  _buildMainAttrs() {
    let mainAttrs = this.buildMainAttrs();

    this.props.inverted && (mainAttrs.className += ' ' + this.getClassName().inverted);

    mainAttrs.className += (this.getColorSchema() || this.props.type === 'link' ? '' : ' btn-default') +
      (this.props.type !== 'link' ? ' ' + this.getClassName().button : "") +
      (this.props.displayBlock ? ' btn-block' : '') +
      (this.isPressed() ? ' active' : '') +
      (this.isDisabled() ? ' disabled' : '') +
      ' btn-' + this.props.size;

    mainAttrs.type = this.props.type;

    this.isDisabled() ?
      (mainAttrs.disabled = true) :
      (mainAttrs.onClick = (this.props.onClick && this._onClickHandler));

    // if (this.props.tooltip) {
    //   mainAttrs['data-toggle'] = 'tooltip';
    //   mainAttrs['data-placement'] = this.props.tooltipPosition;
    //   mainAttrs.title = this.props.tooltip;
    // }

    return mainAttrs;
  },

  //@@viewOn:render
  render: function () {
    let component = (
      <button {...this._buildMainAttrs()}>
        {this.getChildren() || this.getDefault().content}
      </button>
    );
    if (this.props.type === 'link') {
      component = (
        <UU5.Bricks.Link {...this._buildMainAttrs()} >
          {this.getChildren() || this.getDefault().content}
        </UU5.Bricks.Link>
      );
    }

    return this.getNestingLevel() ? component : null;
  }
  //@@viewOff:render
});

export default Button;
