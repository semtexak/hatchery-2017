import React from 'react';
import {BaseMixin, ElementaryMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import Loading from './loading.js';
import Table from './table.js';
import TBody from './table-tbody.js';
import Tr from './table-tr.js';
import Td from './table-td.js';
import Error from './error.js';
import Link from './link.js'
import Modal from './modal.js'

import './file-viewer.less';

export const FileViewer = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.FileViewer',
    nestingLevelList: Environment.getNestingLevelList('bigBox', 'inline'),
    defaults: {
      displayErrMsg: 'Error during loading file '
    },
    classNames: {
      main: 'uu5-bricks-file-viewer',
      blockOfLines: "uu5-bricks-file-viewer-block-of-lines",
      blockOfLineNumbers: "uu5-bricks-file-viewer-block-of-line-numbers bg-info uu5-common-right"
    },
    errors: {
      unknownCallFeedback: 'Call feedback %s is not one of %s',
      loadError: 'File %s cannot be found.'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    src: React.PropTypes.string,
    parameters: React.PropTypes.object,
    numbered: React.PropTypes.bool,
    trimmed: React.PropTypes.bool,
    blockKey: React.PropTypes.string,
    blockStart: React.PropTypes.string,
    blockEnd: React.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      src: null,
      parameters: null,
      numbered: false,
      trimmed: true,
      blockKey: null,
      blockStart: '\@\@viewOn:',
      blockEnd: '\@\@viewOff:'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState: function () {
    return {
      data: null,
      blockOfLines: null,
      blockOfLineNumbers: null,
      blockOfLineNumbersWidth: null,
      callFeedback: 'loading',
      message: null
    };
  },

  componentWillMount: function () {
    !this.props.src && this.setState({callFeedback: 'ready'});
  },

  componentDidMount: function () {
    if (this.props.src) {
      this._loading = true;
      this._getData(this.props);
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.src && (nextProps.src !== this.props.src || nextProps.parameters !== this.props.parameters)) {
      this.setState({
        data: null,
        blockOfLines: null,
        blockOfLineNumbers: null,
        blockOfLineNumbersWidth: null,
        callFeedback: 'loading',
        message: null
      }, function () {
        this._getData(nextProps)
      }.bind(this));
    } else {
      if (
        nextProps.numbered !== this.props.numbered ||
        nextProps.trimmed !== this.props.trimmed ||
        nextProps.blockKey !== this.props.blockKey ||
        nextProps.blockStart !== this.props.blockStart ||
        nextProps.blockEnd !== this.props.blockEnd
      ) {
        this._buildData(nextProps);
      }
    }
  },

  componentWillUnmount: function () {
    this._serverRequest && this._serverRequest.abort();
    this._loading = false;
  },
  
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getData: function (props) {
    this._serverRequest && this._serverRequest.abort();
    this._serverRequest = Tools.getServerRequest(
      props.src,
      props.parameters,
      'text',
      data => {
        if (this._loading) {
          this.setState({data: data, callFeedback: 'ready'}, () => this._buildData(props));
        }
      },
      e => {
        if (this._loading) {
          this.showError('loadError', props.src, {context: {error: e}});
          this.setState({
            callFeedback: 'error',
            message: this.getDefault().displayErrMsg + props.src + ' (' + props.parameters + ')'
          });
        }
      }
    )
  },

  _buildData: function (props) {
    var fileViewer = this;
    var blockOfLines = '';
    var blockOfLineNumbers = '';
    var lines = this.state.data.split("\n");
    var blockOfLineNumbersWidth = (lines.length + 1 + '').length;
    var blockStart = props.blockStart + props.blockKey;
    var blockEnd = props.blockEnd + props.blockKey;
    var write = !props.blockKey;
    let toTrim = null;
    let _toTrim = null;

    if (props.trimmed) {
      lines.forEach((v, i) => {
        if (v.match(blockStart)) {
          write = true;
        } else if (v.match(blockEnd)) {
          write = false;
        } else if (write) {
          _toTrim = v.length - v.replace(/^\s+/, "").length;
          if (toTrim === null || (_toTrim < toTrim)) {
            toTrim = _toTrim
          }
        }
      });
    }

    lines.forEach(function (v, i) {
      if (v.match(blockStart)) {
        write = true;
      } else if (v.match(blockEnd)) {
        write = false;
      } else if (write) {
        if (props.numbered) {
          blockOfLineNumbers += Tools.pad(i + 1, blockOfLineNumbersWidth) + '\n';
        }
        if (props.trimmed) {
          blockOfLines += v.substring(toTrim, v.length) + '\n';
        } else {
          blockOfLines += v + '\n';
        }
      }
    });
    fileViewer.setState({
      blockOfLines: blockOfLines,
      blockOfLineNumbers: blockOfLineNumbers
    });
  },

  _getMainChild: function () {
    var mainChild;
    var mainProps = this.getMainPropsToPass();

    switch (this.state.callFeedback) {
      case 'loading':
        mainChild = <Loading {...mainProps} />;
        break;
      case 'ready':
        mainChild = <Table
          {...this.buildMainAttrs()}
        >
          <TBody>
          <Tr>
            {(this.props.numbered) && (
              <Td
                className={this.getClassName().blockOfLineNumbers}
                mainAttrs={{style: {width: this.state.blockOfLineNumbersWidth + 1 + "em"}}}
              >
                {this.state.blockOfLineNumbers}
              </Td>
            )}
            <Td
              className={this.getClassName().blockOfLines}
            >{this.state.blockOfLines}</Td>
          </Tr>
          </TBody>
        </Table>;
        break;
      case 'error':
        mainChild = <Error {...mainProps} content={this.state.message}/>;
        break;
      default:
        this.showError('unknownCallFeedback', [this.state.callFeedback, 'loading, ready, error']);
        mainChild = <span />;
    }

    return mainChild;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    let component;
    switch (this.getNestingLevel()) {
      case 'bigBox':
      case 'boxCollection':
      case 'box':
        component = this._getMainChild();
        break;
      case 'inline':
        component = this.state.callFeedback === 'ready' ? (
          <span>
            <Modal ref_={(modal) => this._modal = modal}>
              {this._getMainChild()}
            </Modal>
            <Link onClick={()=>this._modal.open()} content={this.props.src}/>
          </span>
        ) : null;
        break;
      default:
        component = null;
    }

    return component;
  }
  //@@viewOff:render
});

export default FileViewer;
