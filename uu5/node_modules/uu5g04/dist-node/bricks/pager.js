import React from 'react';
import {BaseMixin, ElementaryMixin, ColorSchemaMixin, Tools, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import {Row, Column} from './bricks.js';
import Glyphicon from './glyphicon.js';
import Span from './span.js';
import Link from './link.js';

import './pager.less';

export const Pager = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Pager',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'smallBox'),
    classNames: {
      main: 'uu5-bricks-pager uu5-common-text',
      link: 'uu5-bricks-pager-link',
      leftLink: 'uu5-bricks-pager-left',
      rightLink: 'uu5-bricks-pager-right',
      upLink: 'uu5-bricks-pager-up',
      downLink: 'uu5-bricks-pager-down',
      text: 'uu5-bricks-pager-text',
      glyphicon: 'uu5-bricks-pager-glyphicon',
      //bg: 'uu5-common-bg'
    },
    defaults: {
      leftLink: 'uu-glyphicon-arrow-left',
      rightLink: 'uu-glyphicon-arrow-right',
      upLink: 'uu-glyphicon-arrow-up',
      downLink: 'uu-glyphicon-arrow-down'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    leftLink: React.PropTypes.shape({
      text: React.PropTypes.any,
      href: React.PropTypes.string,
      glyphicon: React.PropTypes.string,
      onClick: React.PropTypes.function
    }),
    rightLink: React.PropTypes.shape({
      text: React.PropTypes.any,
      href: React.PropTypes.string,
      glyphicon: React.PropTypes.string,
      onClick: React.PropTypes.function
    }),
    upLink: React.PropTypes.shape({
      text: React.PropTypes.any,
      href: React.PropTypes.string,
      glyphicon: React.PropTypes.string,
      onClick: React.PropTypes.function
    }),
    downLink: React.PropTypes.shape({
      text: React.PropTypes.any,
      href: React.PropTypes.string,
      glyphicon: React.PropTypes.string,
      onClick: React.PropTypes.function
    }),
    //background: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      leftLink: null,
      rightLink: null,
      upLink: null,
      downLink: null,
      //background: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getColumn: function (key) {
    var link = null;

    if (this.props[key]) {
      var linkProps = Tools.merge({}, this.props[key]);
      linkProps.className = linkProps.className ? linkProps.className + ' ' + this.getClassName().link : this.getClassName().link;

      var text = linkProps.text;
      delete linkProps.text;

      var glyphicon = (
        <Glyphicon
          glyphicon={linkProps.glyphicon || this.getDefault(key)}
          className={this.getClassName().glyphicon}
        />
      );

      var leftGlyphicon = null;
      var rightGlyphicon = null;

      if (key === 'leftLink' || key === 'upLink') {
        leftGlyphicon = glyphicon;
      } else {
        rightGlyphicon = glyphicon;
      }

      link = (
        <Link {...linkProps}>
          {leftGlyphicon} <Span className={this.getClassName().text} content={text}/> {rightGlyphicon}
        </Link>
      );
    }

    return (
      <Column className={this.getClassName(key)} colWidth='xs-3'>
        {link}
      </Column>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render: function () {
    var mainProps = this.getMainPropsToPass();
    mainProps.nestingLevel = this.getNestingLevel();
    //this.props.background && (mainProps.className += ' ' + this.getClassName().bg);

    return (
      <Row {...mainProps}>
        {this._getColumn('leftLink')}
        {this._getColumn('upLink')}
        {this._getColumn('downLink')}
        {this._getColumn('rightLink')}
      </Row>
    );
  }
  //@@viewOff:render
});

export default Pager;
