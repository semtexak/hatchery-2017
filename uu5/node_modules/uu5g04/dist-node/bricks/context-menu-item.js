import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin} from '../common/common.js';
import {Link} from './bricks.js';

import './context-menu-item.less'

export default React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.ContextMenu.Item',
    classNames: {
      main: 'uu5-bricks-context-menu-item',
      link: 'uu5-bricks-context-menu-item-link'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    label: React.PropTypes.any, // content
    href: React.PropTypes.string,
    onClick: React.PropTypes.func,
    smoothScroll: React.PropTypes.number,
    offset: React.PropTypes.number,
    target: React.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      label: null,
      href: '#',
      onClick: null,
      smoothScroll: null,
      offset: null,
      target: '_self'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getStandardItem(props) {
    let linkProps = {
      className: this.getClassName().link,
      content: this.props.label,
      parent: this,
      disabled: this.isDisabled()
    };

    if (!this.isDisabled()) {
      linkProps.onClick = this._onItemClick;
      linkProps.href = this.props.href;
      linkProps.smoothScroll = this.props.smoothScroll;
      linkProps.offset = this.props.offset;
      linkProps.target = this.props.target;
    }

    return (
      <li {...props}>
        <Link {...linkProps} />
      </li>
    );
  },

  _onItemClick(target, event){
    if (typeof this.props.onClick === 'function') {
      this.props.onClick({ component: this.getParent(), target: target, event: event, value: this.props.label });
    } else {
      let parent = this.getParent();
      parent && parent.close();
      return this;
    }
    return this;
  },

  _getContentItem(props) {
    return (
      <li {...props}>{this.getChildren()}</li>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let mainAttrs = this.buildMainAttrs();

    let result = null;
    if (this.getContent() || this.props.children) {
      result = this._getContentItem(mainAttrs);
    } else {
      result = this._getStandardItem(mainAttrs);
    }

    return result;
  }
  //@@viewOff:render
});
