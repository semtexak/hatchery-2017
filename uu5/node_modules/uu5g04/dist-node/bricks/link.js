import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  NestingLevelMixin,
  ColorSchemaMixin,
  ContentMixin,
  Tools
} from '../common/common.js';
import Environment from '../environment/environment.js';

import './link.less';

export const Link = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin,
    ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Link',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'inline'),
    classNames: {
      main: 'uu5-bricks-link'
    },
    defaults: {
      content: 'noText'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    href: React.PropTypes.string,
    onClick: React.PropTypes.func,
    onCtrlClick: React.PropTypes.func,
    onWheelClick: React.PropTypes.func,
    smoothScroll: React.PropTypes.number,
    offset: React.PropTypes.number,
    target: React.PropTypes.oneOf(['_blank', '_parent', '_top', '_self'])
    // disabledRouter: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function () {
    return {
      href: null,
      onClick: null,
      onCtrlClick: null,
      onWheelClick: null,
      smoothScroll: 0,
      offset: 0,
      target: '_self',
      // disabledRouter: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _isSmoothScroll() {
    return this.props.href && this.props.href.length > 1 &&
      this.props.href.lastIndexOf('#', 0) === 0 && (this.props.smoothScroll > 0 || this.props.offset > 0);
  },

  _onClickHandler(e) {
    typeof this.props.onClick === 'function' && this.props.onClick(this, e);
    return this;
  },

  _onClickSmoothScroll(e) {
    e.preventDefault();
    Tools.scrollToTarget(this.props.href, this.props.smoothScroll, this.props.offset);
    this._onClickHandler(e);
    return this;
  },

  // _onClickRouter: function (e) {
  //   e.preventDefault();
  //   this.props.router.push(this.props.href);
  //   this._onClickHandler(e);
  //   return this;
  // },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let mainAttrs = this.buildMainAttrs();

    if (!this.isDisabled()) {
      if (typeof this.props.onClick === 'function' || typeof this.props.onWheelClick === 'function' || typeof this.props.onCtrlClick === 'function' || this._isSmoothScroll()) {
        mainAttrs.onClick = (e) => {
          if (e.ctrlKey && typeof this.props.onCtrlClick === 'function') {
            this.props.onCtrlClick(this, e);
          } else {
            if (this._isSmoothScroll()) {
              this._onClickSmoothScroll(e);
              mainAttrs.href = this.props.href;
            } else if (typeof this.props.onClick === 'function') {
              this._onClickHandler(e);
            }
          }
        };
        if (typeof this.props.onWheelClick === 'function') {
          let onMouseDown = mainAttrs.onMouseDown;
          mainAttrs.onMouseDown = (e) => {
            e.button === 1 && e.preventDefault();
            typeof onMouseDown === 'function' && onMouseDown(e, this);
          };

          let onMouseUp = mainAttrs.onMouseUp;
          mainAttrs.onMouseUp = (e) => {
            if (e.button === 1) {
              e.preventDefault();
              this.props.onWheelClick(this, e);
            }
            typeof onMouseUp === 'function' && onMouseUp(e, this);
          };
        }
      } else {
        mainAttrs.href = this.props.href;
        mainAttrs.target = this.props.target;
      }
    }

    return (
      this.getNestingLevel()
        ? (
        <a {...mainAttrs} >
          {this.getChildren() || this.props.href || this.getDefault().content}
          {this.getDisabledCover()}
        </a>
      ) : null
    );
  }
  //@@viewOff:render
});

export const A = Link;

export default Link;
