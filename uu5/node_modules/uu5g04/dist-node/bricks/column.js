import React from 'react';
import {BaseMixin, ElementaryMixin, NestingLevelMixin, SectionMixin, Tools} from '../common/common.js';
import Environment from '../environment/environment.js'
import './column.less'

export const Column = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    SectionMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Column',
    nestingLevelList: Environment.getNestingLevelList('spa', 'smallBoxCollection'),
    classNames: {
      main: 'uu5-bricks-column'
    },
    defaults: {
      colWidth: { xs: 12, sm: 12, md: 12, lg: 12 }
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    width: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.number
    ]),
    // BS Column magic
    colWidth: React.PropTypes.oneOfType([React.PropTypes.shape({
      xs: React.PropTypes.number,
      sm: React.PropTypes.number,
      md: React.PropTypes.number,
      lg: React.PropTypes.number
    }), React.PropTypes.string // see bootstrap col width
    ]),
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      width: null,
      colWidth: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _buildColumnClassName: function (className) {
    return className + ' ' + this._buildColWidthClassName(this.props.colWidth);
  },

  _buildColWidthClassName: function (colWidth) {
    var newBsColWidth = colWidth || this.getDefault('colWidth');

    if (typeof newBsColWidth === 'string') {
      var colWidthArray = newBsColWidth.split(' ');
      newBsColWidth = {};
      colWidthArray.forEach(function (colWidth) {
        var match = colWidth.match(/^(.*)-(\d+)$/);
        newBsColWidth[match[1]] = parseInt(match[2]);
      });
    }

    var sizeClassNames = [];
    var lowerWidth = 12;

    !newBsColWidth.xs && lowerWidth && (newBsColWidth.xs = lowerWidth);
    (lowerWidth = newBsColWidth.xs) && sizeClassNames.push('col-xs-' + newBsColWidth.xs);
    !newBsColWidth.sm && lowerWidth && (newBsColWidth.sm = lowerWidth);
    (lowerWidth = newBsColWidth.sm) && sizeClassNames.push('col-sm-' + newBsColWidth.sm);
    !newBsColWidth.md && lowerWidth && (newBsColWidth.md = lowerWidth);
    (lowerWidth = newBsColWidth.md) && sizeClassNames.push('col-md-' + newBsColWidth.md);
    !newBsColWidth.lg && lowerWidth && (newBsColWidth.lg = lowerWidth);
    newBsColWidth.lg && sizeClassNames.push('col-lg-' + newBsColWidth.lg);

    newBsColWidth['xs-offset'] && sizeClassNames.push('col-xs-offset-' + newBsColWidth['xs-offset']);
    newBsColWidth['sm-offset'] && sizeClassNames.push('col-sm-offset-' + newBsColWidth['sm-offset']);
    newBsColWidth['md-offset'] && sizeClassNames.push('col-md-offset-' + newBsColWidth['md-offset']);
    newBsColWidth['lg-offset'] && sizeClassNames.push('col-lg-offset-' + newBsColWidth['lg-offset']);

    return sizeClassNames.join(' ');
  },

  _getMainAttrs() {
    let mainAttrs = this.buildMainAttrs();

    if (this.props.width) {
      mainAttrs.style = Tools.merge(mainAttrs.style, { width: this.props.width });
    } else {
      mainAttrs.className = this._buildColumnClassName(mainAttrs.className);
    }

    return mainAttrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      this.getNestingLevel()
        ? (
        <div {...this._getMainAttrs()}>
          {this.getHeaderChild()}
          {this.getChildren()}
          {this.getFooterChild()}
          {this.getDisabledCover()}
        </div>
      ) : null
    );
  }
  //@@viewOff:render
});

export default Column;
