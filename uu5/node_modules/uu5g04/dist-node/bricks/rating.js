import React from 'react';
import {BaseMixin, ElementaryMixin, ContentMixin, ColorSchemaMixin, NestingLevelMixin} from '../common/common.js';
import Environment from '../environment/environment.js';
import Glyphicon from './glyphicon.js';

import './rating.less';

const Icon = React.createClass({
  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Rating.Icon',
    classNames: {
      main: 'uu5-bricks-rating-icon',
      icon: 'uu5-bricks-rating-icon-glyphicon',
      icon10: 'uu5-bricks-rating-icon-part-10',
      icon20: 'uu5-bricks-rating-icon-part-20',
      icon30: 'uu5-bricks-rating-icon-part-30',
      icon40: 'uu5-bricks-rating-icon-part-40',
      icon50: 'uu5-bricks-rating-icon-part-50',
      icon60: 'uu5-bricks-rating-icon-part-60',
      icon70: 'uu5-bricks-rating-icon-part-70',
      icon80: 'uu5-bricks-rating-icon-part-80',
      icon90: 'uu5-bricks-rating-icon-part-90',
      full: 'uu5-bricks-rating-icon-full'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    onClick: React.PropTypes.func,
    glyphicon: React.PropTypes.string,
    value: React.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      onClick: null,
      glyphicon: 'glyphicon-star',
      value: 0
    }
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getCorrectClass() {
    let _class;
    let value = this.props.value;
    if (value == 1) {
      _class = {className: this.getClassName().full};
    } else if (value > 0 && value < 1) {
      value = 1 - value;
      let percents = Math.round(value * 10) * 10;
      percents = percents == 0 ? 10 : percents;
      _class = {className: this.getClassName()['icon' + percents]}
    }
    return _class;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render(){
    const mainAttrs = this.buildMainAttrs();
    this.props.onClick && (mainAttrs.onClick = this.props.onClick);
    return (
      <span {...mainAttrs} >
        <Glyphicon glyphicon={this.props.glyphicon} mainAttrs={this._getCorrectClass()}
                   className={this.getClassName().icon}/>
        </span>
    )
  }
  //@@viewOff:render
});

export const Rating = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    ColorSchemaMixin,
    NestingLevelMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Rating',
    nestingLevelList: Environment.getNestingLevelList('bigBoxCollection', 'box'),
    classNames: {
      main: 'uu5-bricks-rating',
      click: 'uu5-bricks-rating-clickable'
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    count: React.PropTypes.number,
    value: React.PropTypes.number,
    onClick: React.PropTypes.func,
    glyphicon: React.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      count: 5,
      value: 0,
      onClick: null,
      glyphicon: 'glyphicon-star'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _createIconArray(){
    const iconArray = [];
    const value = this.props.value;
    const max = this.props.count;
    for (let i = max; i > 0; i--) {

      let iconValue = 0;
      i <= value && (iconValue = 1);
      const integerVal = Math.floor(value);
      const part = value - integerVal;

      (part > 0) && (i == integerVal + 1) && (iconValue = part);
      iconArray.push(<Icon value={iconValue} key={i} glyphicon={this.props.glyphicon}
                           onClick={this.props.onClick ? ((e) => this.props.onClick(i, e, this)) : null }/>)
    }
    return iconArray
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    const mainAttrs = this.buildMainAttrs();
    this.props.onClick && (mainAttrs.className = mainAttrs.className + ' ' + this.getClassName('click'));

    return (
      this.getNestingLevel()
        ? (
          <div {...mainAttrs}>
            {this._createIconArray()}
          </div>
        ) : null
    );
  }
  //@@viewOff:render
});

export default Rating;
