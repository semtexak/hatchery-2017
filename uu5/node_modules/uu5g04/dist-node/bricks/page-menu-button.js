import React from "react";
import BaseMixin from '../common/base-mixin.js';
import ElementaryMixin from '../common/elementary-mixin.js';
import ContentMixin from '../common/content-mixin.js';
import ColorSchemaMixin from '../common/color-schema-mixin.js';
import NestingLevelMixin from '../common/nesting-level-mixin.js';
import CcrReaderMixin from '../common/ccr-reader-mixin';
import Environment from '../environment/environment.js';
import Button from './button.js';

import './page-menu-button.less';

export const MenuButton = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    ContentMixin,
    ColorSchemaMixin,
    NestingLevelMixin,
    CcrReaderMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.Page.MenuButton',
    nestingLevel: 'smallBox',
    classNames: {
      main: 'uu5-bricks-page-menu-button',
      left: 'uu5-bricks-page-menu-button-left',
      right: 'uu5-bricks-page-menu-button-right'
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    menu: React.PropTypes.oneOf(['left', 'right']),
    onClick: React.PropTypes.func,
    pageKey: React.PropTypes.string,
    size: React.PropTypes.string,
    displayBlock: React.PropTypes.bool,
    pressed: React.PropTypes.bool,
    inverted: React.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      menu: 'left',
      onClick: null,
      pageKey: null,
      size: 'md',
      displayBlock: false,
      pressed: false,
      inverted: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount() {
    Environment.EventListener.registerEvent('pageColumn', this.getId(), this._setVisibility);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPage() {
    return this.getCcrComponentByKey(this.props.pageKey || Environment.CCRKEY_PAGE);
  },

  _onClick(button, e) {
    if (typeof this.props.onClick === 'function') {
      this.props.onClick(this, e);
    } else {
      let page = this._getPage();
      if (page) {
        switch (this.props.menu) {
          case 'left':
            page.toggleLeft();
            break;
          case 'right':
            page.toggleRight();
            break;
        }
      }
    }
    return this;
  },

  _isFloat() {
    let float = false;
    let page = this._getPage();

    if (page) {
      switch (this.props.menu) {
        case 'left':
          float = page.isLeftFloat();
          break;
        case 'right':
          float = page.isRightFloat();
          break;
        default:
          float = false;
      }
    }
    return float;
  },

  _getPropsToPass() {
    let props = this.getMainPropsToPass();
    props.className = props.className + ' ' + this.getClassName(this.props.menu);
    props.size = this.props.size;
    props.displayBlock = this.props.displayBlock;
    props.pressed = this.props.pressed;
    props.inverted = this.props.inverted;
    return props
  },

  _getChild() {
    let child = null;
    let content = this.props.content || this.getChildren() || <UU5.Bricks.Glyphicon glyphicon="uu-glyphicon-menu" />;
    if (this._isFloat()) {
      child = <Button
        {...this._getPropsToPass()}
        onClick={this._onClick}
        content={content}
      />
    }
    return child;
  },

  _setVisibility(menu, visible) {
    menu === this.props.menu && this.setAsyncState({ hidden: !visible });
    return this;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      this.getNestingLevel()
        ? this._getChild()
        : null
    )
  },
  //@@viewOff:render

});

export default MenuButton;
