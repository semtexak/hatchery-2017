import React from 'react';
import {
  BaseMixin,
  ElementaryMixin,
  NestingLevelMixin,
  ContentMixin,
  ScreenSizeMixin,
  CcrWriterMixin,
  Tools
} from '../common/common.js';
import Environment from '../environment/environment.js'
import {Div, Row, Column, Error, Code} from '../bricks/bricks.js';
import PageColumn from './page-column.js';
import MenuButton from './page-menu-button.js';

import './page.less';

const LEFT = 'left';
const RIGHT = 'right';
const TOP = 'top';
const BOTTOM = 'bottom';
const CONTENT = 'content';
const PAGE_CONTENT = React.PropTypes.oneOfType([
  React.PropTypes.shape({
    tag: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
    props: React.PropTypes.arrayOf(React.PropTypes.object)
  }),
  React.PropTypes.node,
  React.PropTypes.element,
  React.PropTypes.string,
  React.PropTypes.number
]); //content (bodyItem, node, element, string, number)

export const Page = React.createClass({

  //@@viewOn:mixins
  mixins: [
    BaseMixin,
    ElementaryMixin,
    NestingLevelMixin,
    ContentMixin,
    ScreenSizeMixin,
    CcrWriterMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: 'UU5.Bricks.page',
    nestingLevel: 'page',
    classNames: {
      main: 'uu5-bricks-page',
      top: 'uu5-bricks-page-top',
      bottom: 'uu5-bricks-page-bottom',
      left: 'uu5-bricks-page-left',
      right: 'uu5-bricks-page-right',
      content: 'uu5-bricks-page-content',
      modal: 'uu5-bricks-page-modal uu5-elevation-5',
      alertBus: 'uu5-bricks-page-alert-bus uu5-elevation-5',
      userLayer: 'uu5-bricks-page-user-layer',
      systemLayer: 'uu5-bricks-page-system-layer',
      columnFloat: 'uu5-bricks-page-column-float',
      elevation0: 'uu5-elevation-0',
      elevation1: 'uu5-elevation-1',
      elevation2: 'uu5-elevation-2',
      elevation3: 'uu5-elevation-3',
      elevation4: 'uu5-elevation-4',
      zIndex0: 'uu5-bricks-page-z-index-0',
      zIndex1: 'uu5-bricks-page-z-index-1',
      zIndex2: 'uu5-bricks-page-z-index-2',
      zIndex3: 'uu5-bricks-page-z-index-3',
      zIndex4: 'uu5-bricks-page-z-index-4',
      type: 'uu5-bricks-page-type-',
      flex: 'uu5-bricks-page-flex',
      flexGrow: 'uu5-bricks-page-flex-grow',
      pageFull: 'uu5-bricks-page-full',
      overflowHidden: 'uu5-bricks-page-overflow'
    },
    opt: {
      ccrKey: Environment.CCRKEY_PAGE
    },
    errors: {
      pageAlreadyRegistered: "Page is already registered."
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    type: React.PropTypes.oneOf(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14',
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
    //flex: React.PropTypes.bool,
    fullPage: React.PropTypes.bool,

    topWrapperProps: React.PropTypes.object,
    bottomWrapperProps: React.PropTypes.object,
    leftWrapperProps: React.PropTypes.object,
    rightWrapperProps: React.PropTypes.object,
    contentWrapperProps: React.PropTypes.object,
    userLayerWrapperProps: React.PropTypes.object,
    systemLayerWrapperProps: React.PropTypes.object,
    switchElevationTopBottom: React.PropTypes.bool,
    switchElevationLeftRight: React.PropTypes.bool,

    top: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    bottom: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    left: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    leftOpen: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    leftClosed: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    right: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    rightOpen: PAGE_CONTENT, //content (bodyItem, node, element, string, number)
    rightClosed: PAGE_CONTENT,//content (bodyItem, node, element, string, number)

    alertBus: React.PropTypes.oneOfType([
      React.PropTypes.shape({
        tag: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
        props: React.PropTypes.arrayOf(React.PropTypes.object)
      }),
      React.PropTypes.node,
      React.PropTypes.element
    ]), //content (bodyItem, node, element)
    modal: React.PropTypes.oneOfType([
      React.PropTypes.shape({
        tag: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
        props: React.PropTypes.arrayOf(React.PropTypes.object)
      }),
      React.PropTypes.node,
      React.PropTypes.element
    ]), //content (bodyItem, node, element)
    userLayerContent: React.PropTypes.any, //content
    systemLayerContent: React.PropTypes.any, //content

    leftWidth: React.PropTypes.string, // 'xs-0 sm-20 md-15 lg-15' [!|][xs|sm|md|lg][-nn][-nn]
    rightWidth: React.PropTypes.string // 'xs-0 sm-20 md-15 lg-15'
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      type: 1,
      // flex: false,
      fullPage: true,
      topWrapperProps: {},
      bottomWrapperProps: {},
      leftWrapperProps: {},
      rightWrapperProps: {},
      contentWrapperProps: {},
      userLayerWrapperProps: {},
      systemLayerWrapperProps: {},
      switchElevationTopBottom: false,
      switchElevationLeftRight: false,
      top: null,
      bottom: null,
      left: null,
      leftOpen: null,
      leftClosed: null,
      right: null,
      rightOpen: null,
      rightClosed: null,
      alertBus: null,
      modal: null,
      userLayerContent: null,
      systemLayerContent: null,
      leftWidth: null, // '!xs-30 !sm-25 md-20 lg-15',
      rightWidth: null //'!xs-30 !sm-25 md-20 lg-15'
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // initialize
    // state
    return {
      widths: this._setWidths()
    };
  },

  componentDidMount(){
    if (Environment.page) {
      this.showError('pageAlreadyRegistered');
    } else {
      Environment.page = this;
    }
  },

  componentWillReceiveProps(nextProps){
    this.setState({ widths: this._setWidths(nextProps) });
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },

  componentWillUnmount(){
    Environment.page === this && (Environment.page = null);
  },

  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldRender(nextProps, nextState);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  isLeftFloat(){
    return this.state.widths.left[this.getScreenSize()] && this.state.widths.left[this.getScreenSize()].float;
  },

  isRightFloat(){
    return this.state.widths.right[this.getScreenSize()] && this.state.widths.right[this.getScreenSize()].float;
  },

  //page left column
  getLeftColumn(){
    return this._pageLeft;
  },

  //page right column
  getRightColumn(){
    return this._pageRight;
  },

  //content component of column
  getLeftOpen(){
    return this._leftOpen || this._left;
  },

  //content component of column
  getLeftClosed(){
    return this._leftClosed || this._left;
  },

  //content component of column
  getRightOpen(){
    return this._rightOpen || this._right;
  },

  //content component of column
  getRightClosed(){
    return this._rightClosed || this._right;
  },

  //content component of column
  getTop(){
    return this._top;
  },

  //content component of column
  getBottom(){
    return this._bottom;
  },

  toggleLeft(setStateCallback){
    this._pageLeft && this._pageLeft.toggle(setStateCallback);
    return this;
  },

  toggleRight(setStateCallback){
    this._pageRight && this._pageRight.toggle(setStateCallback);
    return this;
  },

  getUserLayer() {
    return this._userLayer;
  },

  getSystemLayer() {
    return this._systemLayer;
  },

  getAlertBus() {
    return this._alertBus;
  },

  getModal() {
    return this._modal;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getPropsToPass() {
    let newProps = Tools.merge(this.getMainPropsToPass(), { content: null });
    newProps.className += ' ' + this.getClassName('type') + this.props.type;
    this.props.fullPage && (newProps.className += ' ' + this.getClassName('pageFull'));
    return newProps
  },

  _getWidths(width) {
    width = width || 'xs-0';
    let widths = {
      xs: { minWidth: 0, minUnit: '%' },
      sm: { minWidth: 0, minUnit: '%' },
      md: { minWidth: 0, minUnit: '%' },
      lg: { minWidth: 0, minUnit: '%' }
    };

    let splitter = width.split(' ');
    splitter.forEach(split => {
      let [key, minWidth, maxWidth] = split.split('-');
      let match = key.match(/!/g);
      let float = (match && match.length > 0);

      widths[key.replace('!', '')] = {
        minWidth: parseInt(minWidth),
        maxWidth: maxWidth ? parseInt(maxWidth) : null,
        float: float,
        minUnit: (minWidth && minWidth.replace(/[0-9]/g, '')) || '%',
        maxUnit: (maxWidth && maxWidth.replace(/[0-9]/g, '')) || '%'
      };
    });

    widths.xs.minWidth = widths.xs.minWidth === 0 ? 0 : (widths.xs.minWidth || 0);
    widths.sm.minWidth = widths.sm.minWidth === 0 ? 0 : (widths.sm.minWidth || widths.xs.minWidth);
    widths.md.minWidth = widths.md.minWidth === 0 ? 0 : (widths.md.minWidth || widths.sm.minWidth);
    widths.lg.minWidth = widths.lg.minWidth === 0 ? 0 : (widths.lg.minWidth || widths.md.minWidth);

    return widths;
  },

  _setWidths(props){
    let widths;
    let defaultWidth = {
      xs: { minWidth: 0, minUnit: '%' },
      sm: { minWidth: 0, minUnit: '%' },
      md: { minWidth: 0, minUnit: '%' },
      lg: { minWidth: 0, minUnit: '%' },
    };
    props = props || this.props;

    let leftWidths = (this.props.left || this.props.leftOpen || this.props.leftClosed) ? this._getWidths(props.leftWidth) : defaultWidth;
    let rightWidths = (this.props.right || this.props.rightOpen || this.props.rightClosed) ? this._getWidths(props.rightWidth) : defaultWidth;

    widths = {
      left: leftWidths,
      right: rightWidths
    };

    return widths;
  },

  _getWidth(screenSize, wrapper){
    let result = {
      widthContent: '100%',
      floatLeft: this.state.widths.left[screenSize].float,
      floatRight: this.state.widths.right[screenSize].float
    };

    let minWidthLeft = 0;
    let widthLeft = 0;
    let maxWidthLeft = null;
    let minWidthRight = 0;
    let widthRight = 0;
    let maxWidthRight = null;

    if (this.props.left || (this.props.leftOpen && this.props.leftClosed)) {
      minWidthLeft = this.state.widths.left[screenSize].minWidth;
      maxWidthLeft = this.state.widths.left[screenSize].maxWidth;
      widthLeft = maxWidthLeft || minWidthLeft;
    }
    result.minWidthLeft = minWidthLeft + this.state.widths.left[screenSize].minUnit;
    result.maxWidthLeft = maxWidthLeft ? maxWidthLeft + this.state.widths.left[screenSize].maxUnit : null;
    result.widthLeft = widthLeft + (maxWidthLeft ? this.state.widths.left[screenSize].maxUnit : this.state.widths.left[screenSize].minUnit);

    if (this.props.right || (this.props.rightOpen && this.props.rightClosed)) {
      minWidthRight = this.state.widths.right[screenSize].minWidth;
      maxWidthRight = this.state.widths.right[screenSize].maxWidth;
      widthRight = maxWidthRight || minWidthRight;
    }
    result.minWidthRight = minWidthRight + this.state.widths.right[screenSize].minUnit;
    result.maxWidthRight = maxWidthRight ? maxWidthRight + this.state.widths.right[screenSize].maxUnit : null;
    result.widthRight = widthRight + (maxWidthRight ? this.state.widths.right[screenSize].maxUnit : this.state.widths.right[screenSize].minUnit);

    let left = 0;
    if (result.floatLeft) {
      left = (result.minWidthLeft && result.maxWidthLeft) ? result.minWidthLeft : 0;
    } else {
      left = result.widthLeft;
    }
    let right = 0;
    if (result.floatRight) {
      right = (result.minWidthRight && result.maxWidthRight) ? result.minWidthRight : 0;
    } else {
      right = result.widthRight;
    }

    if (wrapper === LEFT) {
      result.widthWrapper = 'Calc(100% - ' + (left || '0%') + ')';
      result.widthContent = 'Calc(((100% - ' + (left || '0%') + ' - ' + (right || '0%') + ') / (100 - ' + (parseInt(left) || '0') + ')) * 100 )';
      result.widthRight = 'Calc(((' + result.widthRight + ') / (100 - ' + (parseInt(left) || '0') + ')) * 100 )';
    } else if (wrapper === RIGHT) {
      result.widthWrapper = 'Calc(100% - ' + (right || '0%') + ')';
      result.widthContent = 'Calc(((100% - ' + (right || '0%') + ' - ' + (left || '0%') + ') / (100 - ' + (parseInt(right) || '0') + ')) * 100 )';
      result.widthLeft = 'Calc(((' + result.widthLeft + ') / (100 - ' + (parseInt(right) || '0') + ')) * 100 )';
    } else {
      result.widthContent = 'Calc(100% - ' + (left || '0%') + ' - ' + (right || '0%') + ')';
    }

    return result;
  },

  _getPageColumn(component, name) {
    let result;
    if (component) {
      if (typeof component === 'object') {
        let newProps = { parent: this, ref_: (ref) => this[name] = ref };
        if (component.props && typeof component.props.ref_ === 'function') {
          newProps.ref_ = (ref) => {
            component.props.ref_(ref);
            this[name] = ref
          }
        } else {
          newProps.ref_ = (ref) => this[name] = ref;
        }

        if (component.tag) {
          result = React.createElement(Tools.checkTag(component), newProps);
        } else if (component.type && typeof component.type === 'function') {
          result = React.cloneElement(component, newProps);
        }
      } else {
        result = component;
      }
    }

    return result;
  },

  _getColumnProps(props, classNames, position, screenSize, block){
    props = props || {};
    let newProps = Tools.merge(props, newProps);

    if (typeof classNames === 'string') {
      newProps.className = newProps.className || '';
      newProps.className += ' ' + classNames;
    } else if (Array.isArray(classNames) && classNames.length > 0) {
      newProps.className = newProps.className || '';
      classNames.forEach((className) => {
        className && (newProps.className += ' ' + className);
      })
    }

    let elevation = this._getElevation(this.props.type);

    switch (position) {
      case LEFT:
        if (this._getWidth(screenSize).floatLeft) {
          newProps.className += ' ' + this.getClassName('columnFloat');
        }
        if (!block && (this.props.left || this.props.leftOpen || this.props.leftClosed)) {
          newProps.elevation = elevation[position];
        }
        break;
      case RIGHT:
        if (this._getWidth(screenSize).floatRight) {
          newProps.className += ' ' + this.getClassName('columnFloat');
        }
        if (!block && (this.props.right || this.props.rightOpen || this.props.rightClosed)) {
          // newProps.className += ' ' + this.getClassName('elevation' + elevation[position]) + ' ' + this.getClassName('zIndex' + elevation[position]);
          newProps.elevation = elevation[position];
        }
        break;
      case TOP:
        if (this.props.top) {
          newProps.className += ' ' + this.getClassName('elevation' + elevation[position]) + ' ' + this.getClassName('zIndex' + elevation[position]);
        }
        break;
      case BOTTOM:
        if (this.props.bottom) {
          newProps.className += ' ' + this.getClassName('elevation' + elevation[position]) + ' ' + this.getClassName('zIndex' + elevation[position]);
        }
        break;
    }

    return newProps;
  },

  _getAlertBus(){
    let alertBus;
    if (this.props.alertBus && typeof this.props.alertBus === 'object') {
      let props = Tools.merge(this.props.alertBus.props, {
        parent: this,
        className: this.getClassName('alertBus') + (this.props.alertBus.props && this.props.alertBus.props.className ? ' ' + this.props.alertBus.props.className : ''),
        ref_: (alertBus) => this._alertBus = alertBus
      });
      if (this.props.alertBus.tag) {
        alertBus = React.createElement(Tools.checkTag(this.props.alertBus.tag), props);
      } else if (this.props.alertBus.type && typeof this.props.alertBus.type === 'function') {
        alertBus = React.cloneElement(this.props.alertBus, props);
      }
    }
    return alertBus;
  },

  _getModal(){
    let modal;
    if (this.props.modal && typeof this.props.modal === 'object') {
      let props = Tools.merge(this.props.modal.props, {
        parent: this,
        className: this.getClassName('modal') + (this.props.modal.props && this.props.modal.props.className ? ' ' + this.props.modal.props.className : ''),
        ref_: (modal) => this._modal = modal
      });
      if (this.props.modal.tag) {
        modal = React.createElement(Tools.checkTag(this.props.modal.tag), props);
      } else if (this.props.modal.type && typeof this.props.modal.type === 'function') {
        modal = React.cloneElement(this.props.modal, props);
      }
    }
    return modal;
  },

  _getUserLayer() {
    let props = this.props.userLayerWrapperProps || {};
    let ref = props.ref_;
    props = Tools.merge(props, {
      dynamic: true,
      parent: this,
      className: Tools.joinClassNames(this.getClassName('userLayer'), props.className),
      ref_: userLayer => {
        this._userLayer = userLayer;
        typeof ref === 'function' && ref(userLayer);
      },
      content: this.props.userLayerContent
    });
    return <Div {...props} />;
  },

  _getSystemLayer() {
    let props = this.props.systemLayerWrapperProps || {};
    let ref = props.ref_;
    props = Tools.merge(props, {
      dynamic: true,
      parent: this,
      className: Tools.joinClassNames(this.getClassName('systemLayer'), props.className),
      ref_: systemLayer => {
        this._systemLayer = systemLayer;
        typeof ref === 'function' && ref(systemLayer);
      },
      content: this.props.systemLayerContent
    });
    return <Div {...props} />;
  },

  _getTop(){
    let top;
    if (this.props.top && typeof this.props.top === 'object') {
      let props = Tools.merge(this.props.top.props, {
        parent: this,
        ref_: (top) => this._top = top
      });
      if (this.props.top.tag) {
        top = React.createElement(Tools.checkTag(this.props.top.tag), props);
      } else if (this.props.top.type && typeof this.props.top.type === 'function') {
        top = React.cloneElement(this.props.top, props);
      }
    } else {
      top = this.props.top;
    }
    return top;
  },

  _getBottom(){
    let bottom;
    if (this.props.bottom && typeof this.props.bottom === 'object') {
      let props = Tools.merge(this.props.bottom.props, {
        parent: this,
        ref_: (bottom) => this._bottom = bottom
      });
      if (this.props.bottom.tag) {
        bottom = React.createElement(Tools.checkTag(this.props.bottom.tag), props);
      } else if (this.props.bottom.type && typeof this.props.bottom.type === 'function') {
        bottom = React.cloneElement(this.props.bottom, props);
      }
    } else {
      bottom = this.props.bottom;
    }
    return bottom;
  },

  _getLeftContent(){
    let left = this._getPageColumn(this.props.left, '_left');
    let leftOpen = this._getPageColumn(this.props.leftOpen, '_leftOpen');
    let leftClosed = this._getPageColumn(this.props.leftClosed, '_leftClosed');
    let leftOpenContent = leftOpen || left;
    let leftClosedContent = leftClosed || left;

    return {
      open: leftOpenContent,
      closed: leftClosedContent
    }
  },

  _getRightContent(){
    let right = this._getPageColumn(this.props.right, '_right');
    let rightOpen = this._getPageColumn(this.props.rightOpen, '_rightOpen');
    let rightClosed = this._getPageColumn(this.props.rightClosed, '_rightClosed');
    let rightOpenContent = rightOpen || right;
    let rightClosedContent = rightClosed || right;

    return {
      open: rightOpenContent,
      closed: rightClosedContent
    }
  },

  _getContentAttrs(screenSize, width){
    let contentAttrs;
    if (this._getWidth(screenSize).floatLeft && this._getWidth(screenSize).minWidthLeft && this._getWidth(screenSize).maxWidthLeft) {
      contentAttrs = {
        style: {
          marginLeft: width ? 'Calc(100% - ' + width + ')' : this._getWidth(screenSize).minWidthLeft
        }
      }
    }
    return contentAttrs;
  },

  _getElevation(type) {
    let elevation;
    switch (type.toString()) {
      case '1':
        elevation = {
          content: 0,
          left: this.props.switchElevationLeftRight ? 1 : 2,
          right: this.props.switchElevationLeftRight ? 2 : 1,
          top: this.props.switchElevationTopBottom ? 3 : 4,
          bottom: this.props.switchElevationTopBottom ? 4 : 3
        };
        break;
      case '2':
        elevation = {
          content: 0,
          left: this.props.switchElevationLeftRight ? 2 : 3,
          right: this.props.switchElevationLeftRight ? 3 : 2,
          top: 4,
          bottom: 1
        };
        break;
      case '3':
        elevation = {
          content: 0,
          left: this.props.switchElevationLeftRight ? 3 : 4,
          right: this.props.switchElevationLeftRight ? 4 : 3,
          top: this.props.switchElevationTopBottom ? 1 : 2,
          bottom: this.props.switchElevationTopBottom ? 2 : 1
        };
        break;
      case '4':
        elevation = {
          content: 0,
          left: this.props.switchElevationLeftRight ? 2 : 3,
          right: this.props.switchElevationLeftRight ? 3 : 2,
          top: 1,
          bottom: 4
        };
        break;
      case '5':
        elevation = {
          content: 0,
          left: 3,
          right: 1,
          top: 4,
          bottom: 2
        };
        break;
      case '6':
        elevation = {
          content: 0,
          left: 1,
          right: 3,
          top: 4,
          bottom: 2
        };
        break;
      case '7':
        elevation = {
          content: 0,
          left: 3,
          right: 1,
          top: 2,
          bottom: 4
        };
        break;
      case '8':
        elevation = {
          content: 0,
          left: 1,
          right: 3,
          top: 2,
          bottom: 4
        };
        break;
      case '9':
        elevation = {
          content: 0,
          left: 4,
          right: 1,
          top: this.props.switchElevationTopBottom ? 2 : 3,
          bottom: this.props.switchElevationTopBottom ? 3 : 2
        };
        break;
      case '10':
        elevation = {
          content: 0,
          left: 4,
          right: 2,
          top: 3,
          bottom: 1
        };
        break;
      case '11':
        elevation = {
          content: 0,
          left: 4,
          right: 2,
          top: 1,
          bottom: 3
        };
        break;
      case '12':
        elevation = {
          content: 0,
          left: 1,
          right: 4,
          top: this.props.switchElevationTopBottom ? 2 : 3,
          bottom: this.props.switchElevationTopBottom ? 3 : 2
        };
        break;
      case '13':
        elevation = {
          content: 0,
          left: 2,
          right: 4,
          top: 3,
          bottom: 1
        };
        break;
      case '14':
        elevation = {
          content: 0,
          left: 2,
          right: 4,
          top: 1,
          bottom: 3
        };
        break;

      default:
        elevation = {
          content: 0
        };
        break;
    }
    return elevation;
  },

  _getFullPageClass(overflowHidden){
    let result = [];
    this.props.fullPage && result.push(this.getClassName('flexGrow'));
    overflowHidden && result.push(this.getClassName('overflowHidden'));
    return result.length ? result.join(' ') : null;
  },

  _getType0(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize);

    return (
      <Div {...this._getPropsToPass()}>
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Column
          {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
          width={width.widthContent}
          mainAttrs={this._getContentAttrs(screenSize)}
          content={this.props.content || this.props.children}
        />

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType1(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize);

    return (
      <Div {...this._getPropsToPass()}>
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row
          {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
          content={this._getTop()}

        />
        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}

            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}
          />
          <Column
            {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
            width={width.widthContent}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Div content={this.props.content || this.props.children} />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>
        <Row
          {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
          content={this._getBottom()}

        />

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType2(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row
          {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
          content={this._getTop()}

        />
        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthContent}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
              width={width.widthContent}
              content={this.props.content || this.props.children}
            />
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType3(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthContent}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row
              {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
              width={width.widthContent}
              content={this.props.content || this.props.children}
            />
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType4(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            width={width.widthContent}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row
              {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
              width={width.widthContent}
              content={this.props.content || this.props.children}
            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>
        <Row
          {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
          content={this._getBottom()}

        />

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType5(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, LEFT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row
          {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
          content={this._getTop()}

        />

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthWrapper}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row display={'flex'} className={this._getFullPageClass()}>
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                width={width.widthContent}
                content={this.props.content || this.props.children}
              />
              <PageColumn
                {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
                width={width.widthRight}
                minWidth={width.minWidthRight}
                maxWidth={width.maxWidthRight}
                openContent={this._getRightContent().open}
                closedContent={this._getRightContent().closed}
                ref_={(right) => this._pageRight = right}
                block={!width.floatRight}
                right={true}

              />
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType6(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, RIGHT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row
          {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
          content={this._getTop()}

        />

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <Column width={width.widthWrapper} className={this.getClassName('flex')}>
            <Row display={'flex'} style={{ position: 'relative' }} className={this._getFullPageClass()}>
              <PageColumn
                {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
                width={width.widthLeft}
                minWidth={width.minWidthLeft}
                maxWidth={width.maxWidthLeft}
                openContent={this._getLeftContent().open}
                closedContent={this._getLeftContent().closed}
                ref_={(left) => this._pageLeft = left}
                block={!width.floatLeft}

              />
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
                width={width.widthContent}
                mainAttrs={this._getContentAttrs(screenSize, width.widthContent)}
                content={this.props.content || this.props.children}
              />
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType7(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, LEFT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthWrapper}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} className={this._getFullPageClass()}>
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
                width={width.widthContent}
                content={this.props.content || this.props.children}
              />
              <PageColumn
                {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
                width={width.widthRight}
                minWidth={width.minWidthRight}
                maxWidth={width.maxWidthRight}
                openContent={this._getRightContent().open}
                closedContent={this._getRightContent().closed}
                ref_={(right) => this._pageRight = right}
                block={!width.floatRight}
                right={true}

              />
            </Row>
          </Column>
        </Row>
        <Row
          {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
          content={this._getBottom()}

        />

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType8(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, RIGHT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <Column width={width.widthWrapper} className={this.getClassName('flex')}>
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} style={{ position: 'relative' }} className={this._getFullPageClass()}>
              <PageColumn
                {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
                width={width.widthLeft}
                minWidth={width.minWidthLeft}
                maxWidth={width.maxWidthLeft}
                openContent={this._getLeftContent().open}
                closedContent={this._getLeftContent().closed}
                ref_={(left) => this._pageLeft = left}
                block={!width.floatLeft}

              />
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
                width={width.widthContent}
                mainAttrs={this._getContentAttrs(screenSize, width.widthContent)}
                content={this.props.content || this.props.children}
              />
            </Row>
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>
        <Row
          {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
          content={this._getBottom()}

        />

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType9(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, LEFT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthWrapper}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} className={this._getFullPageClass()}>
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, this.getClassName('content'), CONTENT)}
                width={width.widthContent}
                content={this.props.content || this.props.children}
              />
              <PageColumn
                {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
                width={width.widthRight}
                minWidth={width.minWidthRight}
                maxWidth={width.maxWidthRight}
                openContent={this._getRightContent().open}
                closedContent={this._getRightContent().closed}
                ref_={(right) => this._pageRight = right}
                block={!width.floatRight}
                right={true}

              />
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType10(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, LEFT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthWrapper}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} className={this._getFullPageClass()}>
              <Column width={width.widthContent} className={this.getClassName('flex')}>
                <Row
                  {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                  content={this.props.content || this.props.children}
                />
                <Row
                  {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
                  content={this._getBottom()}

                />
              </Column>
              <PageColumn
                {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
                width={width.widthRight}
                minWidth={width.minWidthRight}
                maxWidth={width.maxWidthRight}
                openContent={this._getRightContent().open}
                closedContent={this._getRightContent().closed}
                ref_={(right) => this._pageRight = right}
                block={!width.floatRight}
                right={true}

              />
            </Row>

          </Column>
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType11(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, LEFT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <PageColumn
            {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
            width={width.widthLeft}
            minWidth={width.minWidthLeft}
            maxWidth={width.maxWidthLeft}
            openContent={this._getLeftContent().open}
            closedContent={this._getLeftContent().closed}
            ref_={(left) => this._pageLeft = left}
            block={!width.floatLeft}

          />
          <Column
            className={this.getClassName('flex')}
            width={width.widthWrapper}
            mainAttrs={this._getContentAttrs(screenSize)}
          >
            <Row display={'flex'} className={this._getFullPageClass()}>
              <Column width={width.widthContent} className={this.getClassName('flex')}>
                <Row
                  {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
                  content={this._getTop()}

                />
                <Row
                  {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                  content={this.props.content || this.props.children}
                />
              </Column>
              <PageColumn
                {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
                width={width.widthRight}
                minWidth={width.minWidthRight}
                maxWidth={width.maxWidthRight}
                openContent={this._getRightContent().open}
                closedContent={this._getRightContent().closed}
                ref_={(right) => this._pageRight = right}
                block={!width.floatRight}
                right={true}

              />
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />

          </Column>
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType12(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, RIGHT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <Column width={width.widthWrapper} className={this.getClassName('flex')}>
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} style={{ position: 'relative' }} className={this._getFullPageClass()}>
              <PageColumn
                {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
                width={width.widthLeft}
                minWidth={width.minWidthLeft}
                maxWidth={width.maxWidthLeft}
                openContent={this._getLeftContent().open}
                closedContent={this._getLeftContent().closed}
                ref_={(left) => this._pageLeft = left}
                block={!width.floatLeft}

              />
              <Column
                {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                width={width.widthContent}
                mainAttrs={this._getContentAttrs(screenSize, width.widthContent)}
                content={this.props.content || this.props.children}
              />
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType13(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, RIGHT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <Column width={width.widthWrapper} className={this.getClassName('flex')}>
            <Row
              {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
              content={this._getTop()}

            />
            <Row display={'flex'} style={{ position: 'relative' }} className={this._getFullPageClass()}>
              <PageColumn
                {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
                width={width.widthLeft}
                minWidth={width.minWidthLeft}
                maxWidth={width.maxWidthLeft}
                openContent={this._getLeftContent().open}
                closedContent={this._getLeftContent().closed}
                ref_={(left) => this._pageLeft = left}
                block={!width.floatLeft}

              />
              <Column
                className={this.getClassName('flex')}
                width={width.widthContent}
                mainAttrs={this._getContentAttrs(screenSize, width.widthContent)}
              >
                <Row
                  {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                  content={this.props.content || this.props.children}
                />
                <Row
                  {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
                  content={this._getBottom()}

                />
              </Column>
            </Row>
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getType14(){
    let screenSize = this.getScreenSize();
    let width = this._getWidth(screenSize, RIGHT);

    return (
      <Div {...this._getPropsToPass()} >
        {this._getUserLayer()}
        {this._getSystemLayer()}

        <Row display={'flex'} className={this._getFullPageClass(true)}>
          <Column width={width.widthWrapper} className={this.getClassName('flex')}>
            <Row display={'flex'} style={{ position: 'relative' }} className={this._getFullPageClass()}>
              <PageColumn
                {...this._getColumnProps(this.props.leftWrapperProps, this.getClassName('left'), LEFT, screenSize, !width.floatLeft)}
                width={width.widthLeft}
                minWidth={width.minWidthLeft}
                maxWidth={width.maxWidthLeft}
                openContent={this._getLeftContent().open}
                closedContent={this._getLeftContent().closed}
                ref_={(left) => this._pageLeft = left}
                block={!width.floatLeft}

              />
              <Column
                className={this.getClassName('flex')}
                width={width.widthContent}
                mainAttrs={this._getContentAttrs(screenSize, width.widthContent)}
              >
                <Row
                  {...this._getColumnProps(this.props.topWrapperProps, this.getClassName('top'), TOP)}
                  content={this._getTop()}

                />
                <Row
                  {...this._getColumnProps(this.props.contentWrapperProps, [this.getClassName('content'), this._getFullPageClass()], CONTENT)}
                  content={this.props.content || this.props.children}
                />
              </Column>
            </Row>
            <Row
              {...this._getColumnProps(this.props.bottomWrapperProps, this.getClassName('bottom'), BOTTOM)}
              content={this._getBottom()}

            />
          </Column>
          <PageColumn
            {...this._getColumnProps(this.props.rightWrapperProps, this.getClassName('right'), RIGHT, screenSize, !width.floatRight)}
            width={width.widthRight}
            minWidth={width.minWidthRight}
            maxWidth={width.maxWidthRight}
            openContent={this._getRightContent().open}
            closedContent={this._getRightContent().closed}
            ref_={(right) => this._pageRight = right}
            block={!width.floatRight}
            right={true}

          />
        </Row>

        {this._getAlertBus()}
        {this._getModal()}
      </Div>
    );
  },

  _getPageByType(){
    let result;
    switch (this.props.type.toString()) {
      case '0':
        result = this._getType0();
        break;
      case '1':
        result = this._getType1();
        break;
      case '2':
        result = this._getType2();
        break;
      case '3':
        result = this._getType3();
        break;
      case '4':
        result = this._getType4();
        break;
      case '5':
        result = this._getType5();
        break;
      case '6':
        result = this._getType6();
        break;
      case '7':
        result = this._getType7();
        break;
      case '8':
        result = this._getType8();
        break;
      case '9':
        result = this._getType9();
        break;
      case '10':
        result = this._getType10();
        break;
      case '11':
        result = this._getType11();
        break;
      case '12':
        result = this._getType12();
        break;
      case '13':
        result = this._getType13();
        break;
      case '14':
        result = this._getType14();
        break;
    }
    return result;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getPageByType() : null;
  }
  //@@viewOff:render
});

Page.MenuButton = MenuButton;
export default Page;
