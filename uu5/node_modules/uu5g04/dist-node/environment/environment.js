import mod from "module";
import EventListener from '../common/event-listener.js';
import Tools from '../common/tools.js';
import {TextEntityMap} from '../common/text-entity-map.js';

var uri = ((mod ? mod.uri : (document.currentScript || Array.prototype.slice.call(document.getElementsByTagName("script"), -1)[0] || {}).src) || "").toString();
let uu5BaseUrl = uri ? uri.replace(/^(.*\/).*/, "$1") : './';

export const Environment = {
  mode: process.env.NODE_ENV,
  version: process.env.VERSION,
  licence: 'uu5g04-' + process.env.VERSION + ' ©Unicorn 2017',
  basePath: uu5BaseUrl,
  nestingLevelList: ['spa', 'container', 'page', 'bigBoxCollection', 'bigBox', 'boxCollection', 'box', 'smallBoxCollection', 'smallBox', 'inline'],
  nestingLevelStrict: false,
  colorSchemaMap: {
    default: 'default',
    primary: 'blue-rich',
    success: 'green',
    info: 'blue',
    warning: 'orange',
    danger: 'red',

    yellow: 'yellow',
    'yellow-rich': 'yellow-rich',
    orange: 'orange',
    'orange-rich': 'orange-rich',
    pink: 'pink',
    'pink-rich': 'pink-rich',
    red: 'red',
    'red-rich': 'red-rich',
    purple: 'purple',
    'purple-rich': 'purple-rich',
    cyan: 'cyan',
    'cyan-rich': 'cyan-rich',
    blue: 'blue',
    'blue-rich': 'blue-rich',
    green: 'green',
    'green-rich': 'green-rich',
    brown: 'brown',
    'brown-rich': 'brown-rich',
    grey: 'grey',
    'grey-rich': 'grey-rich',
    custom: 'custom'
  },
  // External component calls
  calls: {},
  // External component limits
  limits: {},
  // Central component register (ccr)
  ccr: {
    byKey: {}
  },
  ccrStrict: false,
  CCRKEY_PAGE: 'UU5.Bricks.Page',
  CCRKEY_ROUTER: 'UU5.Common.Router',
  COMPONENT_REGISTRY_URL: 'https://uuos9.plus4u.net/uu-uu5componentregistryg01-main/85849867896916817-fe96c133c895434bbd4d5b24831483f3/getLibrary',
  CDN_URL: 'https://cdn.plus4u.net',
  uu5DataMap: {},
  languages: [{ language: 'cs', q: 1.0 }, { language: 'sk', q: 0.7 }, { language: 'en', q: 0.4 }],
  languageList: {
    cs: {
      flag: uu5BaseUrl + 'assets/flags/cs.png',
      language: 'Česky'
    },
    nl: {
      flag: uu5BaseUrl + 'assets/flags/nl.png',
      language: 'Nederlands'
    },
    en: {
      flag: uu5BaseUrl + 'assets/flags/en-gb.png',
      language: 'English'
    },
    'en-gb': {
      flag: uu5BaseUrl + 'assets/flags/en-gb.png',
      language: 'English GB'
    },
    'en-us': {
      flag: uu5BaseUrl + 'assets/flags/en-us.png',
      language: 'English US'
    },
    fr: {
      flag: uu5BaseUrl + 'assets/flags/fr.png',
      language: 'Français'
    },
    de: {
      flag: uu5BaseUrl + 'assets/flags/de.png',
      language: 'Deutsch'
    },
    pl: {
      flag: uu5BaseUrl + 'assets/flags/pl.png',
      language: 'Polski'
    },
    ru: {
      flag: uu5BaseUrl + 'assets/flags/ru.png',
      language: 'Pусский'
    },
    sk: {
      flag: uu5BaseUrl + 'assets/flags/sk.png',
      language: 'Slovensky'
    },
    es: {
      flag: uu5BaseUrl + 'assets/flags/es.png',
      language: 'Español'
    },
    uk: {
      flag: uu5BaseUrl + 'assets/flags/uk.png',
      language: 'Yкраїнський'
    }
  },
  defaultLanguage: 'en-gb',
  // URI for log errors
  //logErrorUrl: null, //TODO: deprecated
  // function for log errors
  logErrorFunction: null,
  hardSpace: {
    regExp: '\&nbsp;',
    nbSpace: "\u00a0",
    nbHyphen: "\u2011",
    lsiReplacer: {}
  },

  textCorrector: false,

  textEntityMap: TextEntityMap,
  textEntityReplace: true,

  // {'cs-CZ': {decimalSeparator: ',', thousandSeparator: '.'}}
  numberFormat: {},

  // {'cs-CZ': 'dd.MM.yyyy HH:mm:ss.SSS'}
  dateTimeFormat: {},
  dateTimeZone: -new Date().getTimezoneOffset() / 60,
  //uu5String tags regExp
  uu5StringTagsRegExp: null,

  session: null,
  urlBuilder: null,

  library: {},
  useComponentRegistry: true
};

Environment.addLibrary = (libraryName, params) => {
  //TODO check if exist and merge
  Environment.library[libraryName] = params;
  return this;
};

Environment.getLibrary = (libraryName) => {
  let library = Environment.library;
  if (libraryName) {
    library = library[libraryName];
  }
  return library;
};

Environment.EventListener = new EventListener();

Environment.colorSchema = Object.keys(Environment.colorSchemaMap);

Environment.isDevelopment = function () {
  return Environment.mode === 'development';
};

Environment.isProduction = function () {
  return Environment.mode === 'production';
};

// Version
console.log(Environment.licence);

Environment.changeColorSchema = function (key, colorSchema) {
  Environment.colorSchemaMap[key] = colorSchema;
  Environment.colorSchema = Object.keys(Environment.colorSchemaMap);
  return this;
};

Environment.getColorSchema = function (key) {
  return Environment.colorSchemaMap[key];
};

Environment.getLanguages = () => {
  return Environment.languages;
};

Environment.setLanguage = (language) => {
  Environment.setLanguages(language);
  Environment.EventListener.triggerLsi(language);

  let lang = Environment.languages[0];
  lang && Environment.setDateTimeCountry(lang.language);
  return this;
};

Environment.setLanguages = (languages) => {
  if (typeof languages === 'string') {
    Environment.languages = Tools.sortLanguages(languages);
  } else if (typeof languages === 'object') {
    languages.forEach((language) => {
      if (!(typeof language.language === 'string') && !( 0 < language.q < 1)) {
        Tools.error('The provided language array is not allowed.');
        return this;
      }
    });
    Environment.languages = languages;
  }
  return this;
};

Environment.search = (searchedTexts) => {
  Environment.EventListener.triggerHighlight(searchedTexts);
  return this;
};

Environment.setDateTimeFormat = (format) => {
  Environment.EventListener.triggerDateTime({ format: format });
  return this;
};

Environment.setDateTimeCountry = (country) => {
  Environment.EventListener.triggerDateTime({ country: country });
  return this;
};

Environment.setDateTimeZone = (timeZone) => {
  Environment.EventListener.triggerDateTime({ timeZone: timeZone });
  return this;
};

Environment.setDateTimeOptions = (opt) => {
  Environment.EventListener.triggerDateTime(opt);
  return this;
};

Environment.setNumberCountry = (country) => {
  Environment.EventListener.triggerNumber({ country: country });
  return this;
};

Environment.setNumberOptions = (opt) => {
  Environment.EventListener.triggerNumber(opt);
  return this;
};

Environment.getLSIItemByLanguage = (lsi, params, languages) => {
  languages = languages || Environment.getLanguages();
  var result = null;

  if (lsi) {
    var keys = Object.keys(lsi);
    var resLang = keys[0];

    for (var i = 0; i < languages.length; i++) {
      var lang = languages[i];

      if (lsi[lang.location]) {
        resLang = lang.location;
        break;
      } else if (lsi[lang.language]) {
        resLang = lang.language;
        break;
      } else {
        var lsiKeys = keys.filter(function (key) {
          return key.match("^" + lang.language);
        });

        if (lsiKeys.length) {
          resLang = lsiKeys[0];
          break;
        } else if (Environment.defaultLanguage) {
          if (lsi[Environment.defaultLanguage]) {
            resLang = Environment.defaultLanguage;
            break;
          } else if (lsi[Environment.defaultLanguage.split('-')[0]]) {
            resLang = Environment.defaultLanguage.split('-')[0];
            break;
          }
        }
      }
    }

    result = lsi[resLang] || lsi[keys[0]];
  }

  if (result && params) {
    result = Tools.formatString(result, params);
  }

  return result;
};

Environment.getRouter = () => {
  return Environment.router;
};

Environment.setRoute = (route, setStateCallback) => {
  return Environment.getRouter().setRoute(route, setStateCallback);
};

Environment.hardSpace.lsiReplacer['cs-cz'] = function (text) {

  var newText = text.replace(new RegExp(Environment.hardSpace.regExp, 'g'), Environment.hardSpace.nbSpace);

  var nbSpace = Environment.hardSpace.nbSpace;

  var wordsWithSpace = {
    after: ["s", "k", "v", "z", "a", "i", "o", "u"],
    degreesBefore: ["bc.", "bca.", "ing.", "ing.arch.", "mudr.", "mvdr.", "mga.", "mgr.", "judr.", "phdr.", "rndr.", "pharmdr.", "thlic.", "thdr.", "prof.", "doc.", "paeddr.", "dr.", "phmr."],
    degreesAfter: ["ph.d.", "th.d.", "csc.", "drsc.", "dis."],
    units: ["%", "Kč", "€", "m", "g", "l", "q", "t", "w", "J", "ks", "mm", "cm", "km", "mg", "dkg", "kg", "ml", "cl", "dl", "hl", "m3", "km3", "mm2", "cm2", "dm2", "m2", "km2", "ha", "Pa", "hPa", "kPa", "MPa", "bar", "mbar", "nbar", "atm", "psi", "kW", "MW", "HP", "m/s", "km/h", "m/min", "MPH", "cal", "Wh", "kWh", "kp·m", "°C", "°F", "kB", "dB", "MB", "GB", "kHz", "MHz"]
  };

  var spaceSplitter = newText.split(' ');
  var resultText = '';
  for (var i = 0; i < spaceSplitter.length; i++) {
    var prevPart = spaceSplitter[i];
    var prevPartLowerCase = prevPart.toLowerCase();
    var lastChar = prevPart[prevPart.length - 1];
    var nextPart = spaceSplitter[i + 1];
    var firstChar = nextPart && nextPart[0];

    resultText += prevPart === '' ? ' ' : prevPart;

    if (nextPart) {
      if (
        // it is word with space after
      wordsWithSpace.after.indexOf(prevPartLowerCase) > -1 ||

      // dot and next char is not upper - not end of sentence
      '.' === lastChar && firstChar && firstChar !== firstChar.toUpperCase() && !isFinite(firstChar) && wordsWithSpace.degreesAfter.indexOf(prevPart.toLowerCase()) === -1 && spaceSplitter[i - 3] !== "dr." && spaceSplitter[i - 2] !== "h." && prevPart !== "c."

      // numbers split by space
      || isFinite(prevPart) && isFinite(nextPart)

      // degrees before name
      || wordsWithSpace.degreesBefore.indexOf(prevPartLowerCase) > -1

      // degrees after name
      || wordsWithSpace.degreesAfter.indexOf(nextPart.toLowerCase()) > -1

      // between number and unit
      || prevPart.match(/^\d+$/g) && wordsWithSpace.units.indexOf(nextPart) > -1) {
        resultText += nbSpace;

        // degree dr. h. c.
      } else if (nextPart === "dr." && spaceSplitter[i + 2] === "h." && spaceSplitter[i + 3] === "c." || prevPart === "dr." && nextPart === "h." && spaceSplitter[i + 2] === "c." || spaceSplitter[i - 1] === "dr." && prevPart === "h." && nextPart === "c.") {
        resultText += nbSpace;
      } else {
        resultText += " ";
      }
    }
  }

  // space after dot or comma
  //return resultText.replace(/([,.])([a-zA-Z0-9])/, "$1 $2");
  return resultText;
};

Environment.hardSpace.lsiReplacer['code'] = function (text) {
  var resultText = text;

  resultText = resultText.replace(/ /g, Environment.hardSpace.nbSpace);
  resultText = resultText.replace(/-/g, Environment.hardSpace.nbHyphen);

  return resultText;
};

Environment.setSession = (session) => {
  Environment.sessionClass = session;
  Environment.session = session.currentSession;
};

Environment.getSession = () => {
  return Environment.session || (Environment.getSessionClass() ? Environment.getSessionClass().currentSession : null);
};

Environment.getSessionClass = () => {

  let sessionClass;

  if (Environment.sessionClass) {
    sessionClass = Environment.sessionClass;
  } else {
    let Oidc = window.UuOidc;
    if (typeof window.System != "undefined") {
      if (window.System.has(window.System.normalizeSync("uu_oidc"))) {
        Oidc = window.System.get(window.System.normalizeSync("uu_oidc"));
      } else if (window.System.has(window.System.normalizeSync("uu_oidcg01"))) {
        Oidc = window.System.get(window.System.normalizeSync("uu_oidcg01"));
      }
    }

    if (Oidc) {
      sessionClass = Environment.sessionClass = Oidc.Session;
    }
  }

  return sessionClass || null;
};

Environment.App = {
  vucConfig: {
    errorRoute: null
  },
  callConfig: {
    authorizeVuc: () => {
      console.error(`Please add to UU5.Environment.App.callConfig.authorizeVuc your own function as:
        (dtoIn) => {
          $.ajax({
          url: dtoIn.data.name ? '/' + dtoIn.data.name : window.location.href,
          type: 'get',
          cache: false,
          contentType: 'application/json',
          data: { data: dtoIn.data }
          }).done(doneDtoOut => {
            if (typeof dtoIn.done === 'function') {
              dtoIn.done(typeof doneDtoOut == 'string' && doneDtoOut.length ? JSON.parse(doneDtoOut) : doneDtoOut);
            }
          }).fail(failDtoOut => {
            UU5.Common.Tools.error('authorizeVuc error', {dtoIn: dtoIn});
            if (typeof dtoIn.fail === 'function') {
              dtoIn.fail(typeof failDtoOut == 'string' && failDtoOut.length ? JSON.parse(failDtoOut) : failDtoOut);
            }
          });
        }
      `)
    }
  }
};

Environment.Lsi = {};
Environment.Lsi.Forms = {};
Environment.Lsi.Common = {};

Environment.getNestingLevelList = (levelFrom, levelTo) => {
  let begin = Environment.nestingLevelList.indexOf(levelFrom);
  (begin < 0) && (begin = 0);
  let end = Environment.nestingLevelList.indexOf(levelTo) + 1;
  (end <= begin) && (end = Environment.nestingLevelList.length);
  return Environment.nestingLevelList.slice(begin, end);
};

Environment.getUrlBuilder = () => {
  return Environment.urlBuilder;
};

Environment.setUrlBuilder = (urlBuilder) => {
  Environment.urlBuilder = urlBuilder;
};

Environment.tagCalls = {};

export default Environment;
